#!/usr/bin/env bash
# shellcheck disable=

_has_termux() {
  if [[ -d "/data/data/com.termux/files/home" ]]; then
    return 0
  fi

  return 1
}

if _has_termux; then
  export MY_TERMUX_SHARE_DIR="$HOME/storage/downloads/_termux_share"
  mkdir -p "$MY_TERMUX_SHARE_DIR"
fi

# The full path to this script --> /some_prefix/dotfiles/_shell-script
_bash_src="${BASH_SOURCE[0]}"

# MOTIVATION:
#   I started using ubuntu multipass as I am unable to get docker desktop working on my macbook pro 3. In this case, I
#   mount my home directory inside multipass as `/home/kanmii` and use the contents of `/home/kanmii/dotfiles` to
#   configure multipass shell (I want to re-use as much as possible from my current dotfiles). The problem now is that
#   any reference to `$HOME` inside multipass will resolve to `/home/ubuntu`. So I have created this variable to hold
#   the path to `dotfiles` parent whether inside multipass or not.
# On:
#   macos      -> /User/<username>
#   linux      -> /home/<username>
#   multipass  -> /home/<host_username>
export DOTFILE_PARENT_PATH="${_bash_src/\/dotfiles\/_shell-script/''}"
export DOTFILE_ROOT="$DOTFILE_PARENT_PATH/dotfiles"

# Add to $PATH only if `it` does not exist in the $PATH
# fish shell has the `fish_add_path` function which does something similar
# CREDIT: https://unix.stackexchange.com/a/217629
# USAGE:
#   pathmunge /sbin/             ## Add to the start; default
#   pathmunge /usr/sbin/ after   ## Add to the end
pathmunge() {
  # Ignore if directory does not exist or already added to $PATH.
  if [[ ! -d "$1" ]] ||
    echo "$PATH" | grep -Eq "(^|:)$1($|:)"; then
    return 1
  fi

  if [ "$2" = "after" ]; then
    PATH="$PATH:$1"
  else
    PATH="$1:$PATH"
  fi

  return 0
}

_is_linux() {
  if [[ "$(uname -s)" == "Linux" ]]; then
    return 0
  else
    return 1
  fi
}

_is_darwin() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    return 0
  else
    return 1
  fi
}

_has_wsl() {
  if [[ "$(uname -r)" == *WSL2 ]]; then
    return 0
  fi

  return 1
}

if _is_darwin; then
  if [ -f "$DOTFILE_PARENT_PATH/dotfiles/_darwin-binary-overrides.sh" ]; then
    # shellcheck source=/dev/null
    source "$DOTFILE_PARENT_PATH/dotfiles/_darwin-binary-overrides.sh"
  fi
fi

if _is_linux; then
  if _has_termux; then
    __shell_path='/data/data/com.termux/files/usr/bin/bash'
  else
    __shell_path='/usr/bin/bash'
    google_chrome_bin="$(which google-chrome)"
  fi
elif _is_darwin; then
  # Cnfigure shell prompt
  # PS1='\h:\W \u\$ \n\$' # [default] - host:short_path user
  PS1='\u@\h:\w\$' # user@host:full_path

  # TODO:configure VsCode
  # ~/Library/Application Support/Code/User/settings.json
  # ~/Library/Application Support/Code/User/settings.json
  # /Users/kanmii/Library/Application Support/Google/Chrome/Profile 2

  __shell_path='/opt/homebrew/bin/bash'

  # Export google chrome binary so we can launch google chrome from command line.
  export google_chrome_bin='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
  export google_chrome_bin="open -na 'Google Chrome' --args"
fi

# Put the prompt on a new line in case we have very long PWD pathname.
_PS1_APPEND='\n\$ '

# # But if we already have the prompt on a newline, do nothing.
# shellcheck disable=2076
if [[ "$PS1" =~ "$_PS1_APPEND" ]]; then
  _PS1_APPEND=""
fi

# Inverted cursor workaround for windows terminal
# https://github.com/microsoft/terminal/issues/9610#issuecomment-944940268
if [ -n "${WT_SESSION:-}" ]; then
  PS1="\[\e[0 q\e[?12l\]$PS1$_PS1_APPEND"
else
  PS1="$PS1$_PS1_APPEND"
fi

pathmunge "$HOME/.local/bin"
pathmunge "$DOTFILE_PARENT_PATH/dotfiles/scripts"
pathmunge "$HOME/.poetry/bin"

___source_scripts() {
  local _flag_no_termux='no-termux'
  local _flag_mac_only='mac-only'
  local _flag_wsl='wsl'

  local _helper_scrips=(
    _bash_history
    _aliases.sh
    _nvim
    _fzf
    _set-envs
    _erlang-elixir-flags
    _archive_projects
    _deal-paths
    _run-script
    _pv.sh
    "_intellij $_flag_no_termux"
    "_docker $_flag_no_termux"
    "_ggc $_flag_no_termux"
    "_asdf $_flag_no_termux"
    "_macos $_flag_mac_only"
    "_wsl.sh $_flag_wsl"
  )

  local _elm
  local _elm_array

  for _elm in "${_helper_scrips[@]}"; do
    read -r -d '' -a _elm_array <<<"$_elm"

    local __helper_script="$DOTFILE_PARENT_PATH/dotfiles/${_elm_array[0]}"
    local _flag="${_elm_array[1]}"

    if [[ ! -e "$__helper_script" ]]; then
      continue
    fi

    if [[ "$_flag" == "$_flag_no_termux" ]] && _has_termux; then
      continue
    fi

    if [[ "$_flag" == "$_flag_mac_only" ]] && ! _is_darwin; then
      continue
    fi

    if [[ "$_flag" == "$_flag_wsl" ]] && [[ "$(uname -r)" != *WSL2 ]]; then
      continue
    fi

    # shellcheck source=/dev/null
    source "$__helper_script"
  done
}
___source_scripts

if _has_termux; then
  # /START/ Clipboard
  tcs() {
    termux-clipboard-set "$@"
  }
  export -f tcs

  tcg() {
    termux-clipboard-get "$@"
  }
  export -f tcg
# /END/ Clipboard
fi
