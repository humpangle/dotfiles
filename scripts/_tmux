#!/usr/bin/env bash

___start_tmux_help() {
  read -r -d '' var <<'eof' || true
Start tmux. Usage:
  start_tmux [OPTIONS] [session]

If no options and session are given, we will change to dotfiles directory and start/enter $DEFAULT_TMUX_SESSION if it exists.

Options:
  -h,--help
    Print this help text and quit.
  -c,--cd <dir>
    Change directory to <dir> before entering tmux.
  -p,--pwd
    Change directory to current working directory before entering tmux.
  -b.--base
    Must be used in addition to --cd or --pwd. Use the basename of the directory to change to as session name. If
    [session] is specified, this option is ignored.
  -d,--detach
    Detach from all clients before attaching to a client.
  -D,--debug
    Do not take any action - just print command to run to stdout.
  -n.--new <session>
    Create a new tmux session named <session>

Examples:
  # Get help.
  _tmux start_tmux --help

  # Start default session (must set DEFAULT_TMUX_SESSION environment variable).
  _tmux start_tmux

  # Change directory to <dir> and start tmux session <session>.
  _tmux start_tmux --cd <dir> <session>
  _tmux start_tmux -c <dir> <session>

  # Change directory to $PWD and start tmux session <session>.
  _tmux start_tmux --pwd <session>
  _tmux start_tmux -p <session>

  # Change directory to $PWD and start tmux whose session name is the basename of $PWD.
  _tmux start_tmux --pwd --base
  _tmux start_tmux -pb

  # Detach <session> from all clients before attaching to <session>.
  _tmux start_tmux --detach
  _tmux start_tmux -d
  _tmux start_tmux -d <session>

  # Print command to run only.
  _tmux start_tmux --debug --pwd --base
  _tmux start_tmux -Dpb

  # Create new session
  _tmux start_tmux --new session_name
  _tmux start_tmux -n session_name
eof

  echo -e "$var"
}

start_tmux() {
  : "___help___ ___start_tmux_help"

  set -o errexit

  local _session
  local _cd
  local _use_basename_as_session
  local _detach
  local _debug
  local _new

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local _parsed

  if ! _parsed="$(
    getopt \
      --longoptions=help,pwd,cd:,base,detach,debug,new \
      --options=h,p,c:,b,d,D,n \
      --name "$0" \
      -- "$@"
  )"; then
    ___start_tmux_help
    exit 129
  fi

  # Provides proper quoting
  eval set -- "$_parsed"

  while true; do
    case "$1" in
    --help | -h)
      ___start_tmux_help
      return
      ;;

    --cd | -c)
      _cd=$2
      shift 2
      ;;

    --pwd | -p)
      _cd=$PWD
      shift
      ;;

    --base | -b)
      _use_basename_as_session=1
      shift
      ;;

    --detach | -d)
      _detach=1
      shift
      ;;

    --debug | -D)
      _debug=1
      shift
      ;;

    --new | -n)
      _new=1
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      echo "Unknown option ${1}." >&2
      ___start_tmux_help
      exit 129
      ;;
    esac
  done

  if [[ "$#" -eq 1 ]]; then
    _session="$1"
  fi

  # --------------------------------------------------------------------------
  # END PARSE ARGUMENTS
  # --------------------------------------------------------------------------

  if [[ -n "$_cd" ]]; then
    _cd="$(
      realpath "$_cd"
    )"

    if [[ -z "$_session" && -n "$_use_basename_as_session" ]]; then
      _session="$(
        basename "$_cd"
      )"
    fi
  fi

  local _session_exists

  # If session specified/computed is not in list of available sessions and we are not creating new session, we must
  # error.
  if [[ -n "$_session" && -z "$_new" ]]; then
    local _list_existing_sessions

    mapfile -t _list_existing_sessions < <(list --names)

    for _elm in "${_list_existing_sessions[@]}"; do
      if [[ "$_elm" == "$_session" ]]; then
        _session_exists=1
        break
      fi
    done

    if [[ -z "$_session_exists" ]]; then
      echo -e \
        "\nSession \"$_session\" does not exist. Are you trying to create a new session? Then use -n,--new flag.\n" \
        >&2

      exit 1
    fi
  fi

  if [[ -z "$_session" ]]; then
    _session="${1:-$DEFAULT_TMUX_SESSION}"

    if [[ -z "$_cd" ]]; then
      _cd="$HOME/dotfiles"
    fi
  fi

  if [[ -z "$_session" ]]; then
    echo "Provide target session or set DEFAULT_TMUX_SESSION environment variable." >&2
    exit 1
  fi

  local _cmd="tmux new-session -s $_session"

  if tmux ls &>/dev/null &&
    [[ -z "$_new" ]]; then
    _cmd="tmux attach-session"

    if [[ -n "$_detach" ]]; then
      _cmd+=" -d"
    fi

    _cmd+=" -t $_session"
  fi

  if [[ -n "$_cd" ]]; then
    _cmd+=" -c $_cd"
  fi

  if [[ -n "$_debug" ]]; then
    echo -e "\nCD:  $_cd\nCMD: $_cmd\n"
    return
  fi

  if [[ -n "$TMUX" ]]; then
    echo -e "\nPlease disconnect from tmux session \"$(tmux display-message -p '#S')\".\n" >&2
    exit 1
  fi

  if [[ -n "$_cd" ]]; then
    cd "$_cd" || exit 1
  fi

  bash -c "$_cmd"
  ebnis-save-tmux.sh quiet &>/dev/null || true
}

___list_help() {
  read -r -d '' var <<'eof' || true
List tmux sessions and clients. Usage:
  list [OPTIONS]

List sessions or clients if tmux is started otherwise list sessions from inside resurrect file (if that file exists).

Options:
  -h,--help
    Print this help text and quit.
  -c,--client
    List clients (and not sessions).
  -r,--resurrect
    Fetch session list from resurrect file instead of querying tmux even if tmux session is active.
  -v,--verbose
    Include the command for starting each listed session.
  -n,--names
    Return session names only

Examples:
  # Get help.
  _tmux list --help

  # List sessions including information about their present working directories, the default session and tmux states
  # as seen in tmux resurrect file.
  _tmux list

  # List sessions including commands needed to start each listed session.
  _tmux list --verbose
  _tmux list -v

  # List clients.
  _tmux list --client
  _tmux list -c

  # List session names only (no additional information)
  _tmux list --names
  _tmux list -n
eof

  echo -e "$var"
}

list() {
  : "___help___ ___list_help"

  set -o errexit

  local _clients
  local _from_resurrect_file
  local _verbose
  local _names_only

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local _parsed

  if ! _parsed="$(
    getopt \
      --longoptions=help,client,resurrect,verbose,names \
      --options=h,c,r,v,n \
      --name "$0" \
      -- "$@"
  )"; then
    ___list_help
    exit 129
  fi

  # Provides proper quoting
  eval set -- "$_parsed"

  while true; do
    case "$1" in
    --help | -h)
      ___list_help
      return
      ;;

    --client | -c)
      _clients=1
      shift
      ;;

    --resurrect | -r)
      _from_resurrect_file=1
      shift
      ;;

    --verbose | -v)
      _verbose=1
      shift
      ;;

    --names | -n)
      _names_only=1
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      echo "Unknown option ${1}." >&2
      ___list_help
      exit 129
      ;;
    esac
  done

  # --------------------------------------------------------------------------
  # END PARSE ARGUMENTS
  # --------------------------------------------------------------------------

  local _resurrect_file="$HOME/.tmux/resurrect/last"

  # Where we gather session information read from resurrect file into.
  local _sessions_info_from_resurrect_file

  # The current working directory of each session - as read from resurrect file.
  local _sessions_pwds_from_resurrect_file

  # Gather information from resurrect file
  if [[ -s "$_resurrect_file" ]]; then
    # If tmux running, flush sessions info into resurrect file.
    ebnis-save-tmux.sh quiet &>/dev/null || true

    local _session_resurrect_list
    _session_resurrect_list="$(
      awk '/^window\s+/ {print $2}' "$_resurrect_file" |
        sort -u
    )"

    if [[ -n "$_names_only" ]]; then
      echo "${_session_resurrect_list[*]}"
      return
    fi

    for _elm in $_session_resurrect_list; do
      local _windows_count
      _windows_count="$(
        awk \
          -v _awk_elm="$_elm" \
          'match($0, "^window\\s+" _awk_elm) {print $0}' "$_resurrect_file" |
          wc -l |
          xargs
      )"

      _sessions_info_from_resurrect_file+="$_elm: $_windows_count windows\n"

      local _session_pwd_from_resurrect_file
      # Matching pattern:
      # pane  session_name window_index active_win?  :*  pane_index  hostname  :directory active_pane? program  :program?/empty
      # active = 1  inactive = 0
      _session_pwd_from_resurrect_file="$(
        awk -v _awk_var_session="$_elm" 'match($0, "^pane\\s+" _awk_var_session "\\s+0\\s+[0-1]\\s+:.*\\s+1\\s+.+\\s+:(/.+)\\s+[0-1]", matches) {print matches[1]}' "$_resurrect_file"
      )"

      if [[ -n "$_session_pwd_from_resurrect_file" ]]; then
        _sessions_pwds_from_resurrect_file+="$_elm:\n$_session_pwd_from_resurrect_file\n"

        if [[ -n "$_verbose" ]]; then
          local _cd1719741431="cd $_session_pwd_from_resurrect_file"
          local _start1719741519="_tmux start_tmux -c $_session_pwd_from_resurrect_file $_elm"

          _sessions_pwds_from_resurrect_file+="$_cd1719741431\n"
          _sessions_pwds_from_resurrect_file+="$_start1719741519\n"
          _sessions_pwds_from_resurrect_file+="$_cd1719741431 && $_start1719741519\n"
        fi

        _sessions_pwds_from_resurrect_file+="\n"
      fi
    done

    _sessions_info_from_resurrect_file+="\n$(tail -n1 "$_resurrect_file")"

    if [[ -n "$_sessions_pwds_from_resurrect_file" ]]; then
      _sessions_pwds_from_resurrect_file="\nPWDs:\n$_sessions_pwds_from_resurrect_file"
    fi
  fi
  # /END/ Gather information from resurrect file.

  # User asked that we only query resurrect file - we query and exit.
  if [[ -n "$_from_resurrect_file" ]]; then
    if [[ -n "$_sessions_info_from_resurrect_file" ]]; then
      echo -e "Sessions from $_resurrect_file:\n$_sessions_info_from_resurrect_file\n$_sessions_pwds_from_resurrect_file"
      return
    fi

    echo "No sessions are available." >&2
    exit 1
  fi

  local _sessions

  # User asked for clients information only - we return clients's information and exit.
  if [[ -n "$_clients" ]]; then
    if _clients="$(tmux list-clients 2>&1)"; then
      if [[ -n "$_clients" ]]; then
        echo -e "$_clients\n$_sessions_pwds_from_resurrect_file"
        return
      fi
    fi

    echo -e "\nWe can not retrieve clients or no clients are attached - we will try to serve you sessions:\n"
  fi

  # Is tmux server started? - Get sessions data from live tmux server and enrich with information from resurrect file.
  if _sessions="$(tmux ls 2>&1)"; then
    if [[ -n "$_names_only" ]]; then
      awk -F ':' '{print $1}' <<<"$_sessions"
      return
    fi

    echo -e "$_sessions\n$_sessions_pwds_from_resurrect_file"
    return
  fi

  # tmux server is not live - return only information from resurrect file.
  if [[ -n "$_sessions_info_from_resurrect_file" ]]; then
    echo -e "tmux has not been started. Available sessions:\n$_sessions_info_from_resurrect_file"

    if [[ -n "$DEFAULT_TMUX_SESSION" ]]; then
      echo -e "\nDefault session: $DEFAULT_TMUX_SESSION"
    fi

    echo -e "\n$_sessions_pwds_from_resurrect_file"

    return
  fi

  echo "tmux has not been started and no sessions are available." >&2
  exit 1
}

___kill_tmux_help() {
  read -r -d '' var <<'eof'
Helper for killing tmux session(s). Usage:
  kill_tmux [OPTIONS]

Options:
  -h,--help
    Print this help text and quit.
  -a,--all-but
    Kill all but session from which command was invoked.
  -c,--current
    Kill session from which command was invoked (current session).
  -n,--numbered
    Kill sessions with only numerical names.

Examples:
  # Get help.
  _tmux kill_tmux --help
  _tmux kill_tmux # Call with no argument.

  # Kill all sessions except session from which this command is called.
  _tmux kill_tmux --all-but
  _tmux kill_tmux -a

  # Kill session from which this command is called (current session).
  _tmux kill_tmux --current
  _tmux kill_tmux -c

  # Kill sessions with only numerical names. (Will kill sessions named 1, 2, 3, .. 10, 11, ..)
  _tmux kill_tmux --numbered
  _tmux kill_tmux -n

  # Kill one or more specified sessions
  _tmux kill_tmux session-1 session2 ... session-n
eof

  echo -e "$var"
}

# :TODO:persist session information ala tmux-resurrect
kill_tmux() {
  : "___help___ ___kill_tmux_help"

  local _all_but
  local _current
  local _numbered

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local parsed

  if ! parsed="$(
    getopt \
      --longoptions=help,all-but,current,numbered \
      --options=h,a,c,n \
      --name "$0" \
      -- "$@"
  )"; then
    exit 1
  fi

  # Provides proper quoting
  eval set -- "$parsed"

  while true; do
    case "$1" in
    --help | -h)
      ___kill_tmux_help
      return
      ;;

    --all-but | -a)
      _all_but=1
      shift
      ;;

    --current | -c)
      _current=1
      shift
      ;;

    --numbered | -n)
      _numbered=1
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      echo "Unknown option ${1}." >&2
      return
      ;;
    esac
  done

  local _other_args=()
  _other_args=("$@")
  # --------------------------------------------------------------------------
  # END PARSE ARGUMENTS
  # --------------------------------------------------------------------------

  if [[ -n "${_other_args[*]}" ]]; then
    for _session in "${_other_args[@]}"; do
      echo "Killing session \"$_session\""

      tmux kill-session -t "$_session"
    done

    return
  fi

  local _this_session

  _this_session="$(
    tmux list-panes -t "$TMUX_PANE" -F '#S' |
      head -n1
  )"

  if [[ -n "$_current" ]]; then
    echo "Killing current session \"$_this_session\""
    tmux kill-session -t "$_this_session"
    return
  fi

  local _all_sessions

  _all_sessions="$(
    tmux list-sessions -F '#S'
  )"

  if [[ -n "$_numbered" ]]; then
    while IFS= read -r _session; do
      if [[ "$_session" == "$_this_session" ]]; then continue; fi

      echo "Killing session \"$_session\""
      tmux kill-session -t "$_session"
    done < <(grep -P "\d+" <<<"$_all_sessions")

    return
  fi

  if [[ -n "$_all_but" ]]; then
    while IFS= read -r _session; do
      if [[ "$_session" == "$_this_session" ]]; then continue; fi

      echo "Killing session \"$_session\""
      tmux kill-session -t "$_session"
    done <<<"$_all_sessions"

    return
  fi

  ___kill_tmux_help
}

_is_local_function() {
  local _function_name="$1"
  local _this_file_content="$2"

  # Function name is not a local function - but perhaps inherited from the shell.
  if ! grep -qP "^$_function_name\(\)\s+\{" <<<"$_this_file_content" &&
    ! grep -qP "function\s+${_function_name}\s+{" <<<"$_this_file_content"; then
    return 1
  fi

  return 0
}

_command_exists() {
  local _command_to_test="$1"
  local _this_file_content
  _this_file_content="$(cat "$0")"

  mapfile -t _all_function_names < <(compgen -A function | grep -v '^_')

  for _name in "${_all_function_names[@]}"; do
    if ! _is_local_function "$_name" "$_this_file_content"; then
      continue
    fi

    if [[ "$_name" == "$_command_to_test" ]]; then
      return 0
    fi
  done

  return 1
}

help() {
  : "List available commands."

  # Matching pattern examples:
  # `: "___help___ ___some_func_help"`
  # `: "___help___ ____some-func-help"`
  local _help_func_pattern="[_]*___[a-zA-Z][a-zA-Z0-9_-]*[_-]help"

  if [[ -z "$1" ]]; then
    # Regular functions do not start with _.
    mapfile -t _function_names < <(
      compgen -A function |
        grep -v '^_'
    )
  else
    # Helper functions start with _.
    mapfile -t _function_names < <(
      compgen -A function |
        grep '^_' |
        grep -v -E "$_help_func_pattern"
    )
  fi

  local _this_file_content
  _this_file_content="$(cat "$0")"

  local len=0
  declare -A name_to_len_map=()

  for _name in "${_function_names[@]}"; do
    _len="${#_name}"
    name_to_len_map["$_name"]="${_len}"
    if [[ "${_len}" -gt "${len}" ]]; then len=${_len}; fi
  done

  declare -A _all_output=()
  declare -A _aliases=()
  declare -A _name_spaces_map=()

  len=$((len + 10))

  for _name in "${_function_names[@]}"; do
    if ! _is_local_function "$_name" "$_this_file_content"; then
      continue
    fi

    local spaces=""
    _len="${name_to_len_map[$_name]}"
    _len=$((len - _len))

    for _ in $(seq "${_len}"); do
      spaces="${spaces}-"
      ((++t))
    done

    local _function_def_text
    _function_def_text="$(type "${_name}")"

    local _alias_name

    # Matching pattern example:
    # `: "___alias___ install-elixir"`
    _alias_name="$(awk \
      'match($0, /^ +: *"___alias___ +([a-zA-Z_-][a-zA-Z0-9_-]*)/, a) {print a[1]}' \
      <<<"${_function_def_text}")"

    if [[ -n "${_alias_name}" ]]; then
      _aliases["${_alias_name}"]="${_aliases["${_alias_name}"]} ${_name}"
      continue
    fi

    local _help_func

    _help_func="$(
      awk \
        -v _awk_help_func_pattern="$_help_func_pattern" \
        'match($0, "^ +: *\"___help___ +(" _awk_help_func_pattern ")", a) {print a[1]}' \
        <<<"$_function_def_text"
    )"

    # Get the whole function definition text and extract only the documentation
    # part.
    if [[ -n "$_help_func" ]]; then
      mapfile -t _doc_lines < <(
        eval "$_help_func" 2>/dev/null
      )
    else
      mapfile -t _doc_lines < <(
        sed -nEe "s/^[[:space:]]*: ?\"(.*)\";/\1/p" <<<"$_function_def_text"
      )
    fi

    local _output=""

    if [[ -n "${_doc_lines[*]}" ]]; then
      for _doc in "${_doc_lines[@]}"; do
        _output+="$_name $spaces $_doc\n"
      done
    else
      _output="$_name $spaces *************\n"
    fi

    _all_output["$_name"]="$_output"
    _name_spaces_map["$_name"]="$_name $spaces"
  done

  for _name in "${!_all_output[@]}"; do
    _output="${_all_output["${_name}"]}"
    echo -e "${_output}"

    local _alias_names="${_aliases["${_name}"]}"

    if [[ -n "${_alias_names}" ]]; then
      echo -e "${_name_spaces_map["${_name}"]} ALIASES: ${_alias_names}\n\n"
    fi
  done
}

"${@:-help}"
