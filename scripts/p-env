#!/usr/bin/env bash
# shellcheck disable=2034,2209,2135,2155,2046,2251
# More safety, by turning some bugs into errors.
# Without `errexit` you don’t need ! and can replace
# ${PIPESTATUS[0]} with a simple $?, but I prefer safety.
set -o errexit
set -o pipefail
set -o noclobber
# set -o nounset

function usage {
  set +o errexit

  read -r -d '' var <<'eof'
Usage:
  p-env input-env-file [OPTIONS]

Options:
  --help/-h
      Print this help text and exit.

  --debug/-d
      Print each line of `variable=value` as it is read.

  --string/-s
      Output string to stdout instead of writing to a file.

  --output/-o /some/file
      Specify output file. If `--string` option is specified, this option will be ignored. If this option is not
      specified, we do not want to output to stdout and we are not executing a command, we will set the output filename
      to the input filename suffixed with `.n`

  --format/-f format-name
      Specify output format. Valid format names are yaml,yml,json.

  --exec/-e command
      Execute a command, passing the environment variables to the command.

  --cwd
      Works with `--exec` option. Change current working directory before executing command.

Examples:
  p-env --help
  p-env input-env-file --output /output/file --format json
eof

  echo -e "${var}"
  exit "${1:-2}"
}

_out_filename=
_format=
_in_filename=
_in_file_content=
_should_output_to_stdout=
_command_to_exec=
cwd=
debug=
_level=2

function parse-args {
  # -allow a command to fail with !’s side effect on errexit
  # -use return value from ${PIPESTATUS[0]}, because ! hosed $?
  ! getopt --test >/dev/null
  if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "I’m sorry, $(getopt --test) failed in this environment."
    exit 1
  fi

  long_options=string,debug,format:,output:,exec:,cwd:,no-change-name,env-name:,help,level:
  short_options=sdf:o:e:v,n,a:,h,l:

  # -regarding ! and PIPESTATUS see above
  # -temporarily store output to be able to check for errors
  # -activate quoting/enhanced mode (e.g. by writing out “--options”)
  # -pass arguments only via   -- "$@"   to separate them correctly
  ! parsed_output=$(getopt --options=$short_options --longoptions=$long_options --name="$0" -- "$@")
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    usage
  fi

  # read getopt’s output this way to handle the quoting right:
  eval set -- "$parsed_output"

  # now enjoy the options in order and nicely split until we see --
  while true; do
    case "$1" in
    -h | --help)
      usage 0
      ;;

    -s | --string)
      _should_output_to_stdout=y
      shift
      ;;

    -d | --debug)
      debug=y
      shift
      ;;

    -f | --format)
      _format="$2"
      shift 2
      ;;

    -o | --output)
      _out_filename="$2"
      shift 2
      ;;

    -e | --exec)
      _command_to_exec="$2"
      shift 2
      ;;

    --cwd)
      cwd="$2"
      shift 2
      ;;

    --level | -l)
      _level=$2
      shift 2
      ;;

      # -- means the end of the arguments; drop this, and break out of the
      # while loop
    --)
      shift
      break
      ;;

    *)
      echo "Unexpected option: $1."
      usage
      ;;
    esac
  done

  # handle non-option arguments
  if [[ $# -ne 1 ]]; then
    echo "$0: File containing environment variable is required."
    usage 4
  fi

  _in_filename="$1"
}

function _should_output_to_file {
  if [[ -z "${_should_output_to_stdout}" ]] &&
    [[ -z "$_command_to_exec" ]]; then
    return 0
  else
    return 1
  fi
}

function _compute_path_to_use {
  local _path_to_use=$1
  local _exists

  for _l in $(seq "$_level"); do
    if [[ -e "$_path_to_use" ]]; then
      _exists=1
      break
    fi

    _path_to_use="../$_path_to_use"
  done

  if [[ -z "$_exists" ]]; then
    return
  fi

  echo "$_path_to_use"
}

_debug_fn() {
  if [[ -z "$debug" ]]; then
    return
  fi

  local _key="$1"
  local _val=$2

  local _len_key="${#_key}"
  local _len_spaces=$((60 - _len_key))

  local _spaces=""
  for ((i = 0; i < _len_spaces; i++)); do
    _spaces="$_spaces "
  done

  local _string="$_key $_spaces------> $_val"

  # s == start
  # Start a new set of debugging.
  if [[ $3 == "s" ]]; then
    _string="\n$_string"
  fi

  echo -e "$_string"
}

# This utility function is necessary because commands `realpath` and `readlink` do not work for non existing
# paths on macos.
#
# We must wrap the function in brackets instead of curly braces so that it runs in a subshell and restores the original
# working directory on exit.
_resolve_rel_to_abs_path() (
  # Extract '/file' from '/dir/file'

  # We only change the directory if the name doesn't match for the cases where we were passed something like 'file'
  # without './'

  # ../env -> ..
  # ./a/c/ -> ./a/c
  local _dirname="${1%/*}"

  if [[ "$_dirname" != "$1" ]]; then
    if ! cd "${1%/*}" &>/dev/null; then
      return
    fi
  fi

  local _basename="${1##*/}"
  echo -n "$(pwd)/$_basename"
)

parse-args "$@"

if [[ "$_level" -gt 5 ]]; then
  echo -e "Maximum level of 5 allowed. Got $_level\n"
  usage
fi

_path_to_use="$(
  _compute_path_to_use "$_in_filename"
)"

if [[ -z "$_path_to_use" ]]; then
  echo "$_in_filename does not exist."
  exit 1
fi

_in_filename="$_path_to_use"

_in_file_full_path_name="$(realpath "$_in_filename")"
_in_file_dir="$(dirname "$_in_file_full_path_name")"

_in_file_content="$(cat "$_in_file_full_path_name")"

_out_file_full_path_name="${_in_file_full_path_name}.n"

declare -A _env_key_to_value_map=()

function _parse_variables_in_in_infile {
  _line_regex="^[^#]+.+"

  # Change directory to root of the environment. Why?
  # We may call this script at as many as $_level up the root of in_file, but we want to make sure we are working only in the root of in_file
  cd "$_in_file_dir"

  while read -r line; do
    if [[ "$line" =~ $_line_regex ]]; then
      key=$(
        echo "$line" |
          cut -d '=' -f 1
      )

      val=$(
        echo "$line" |
          cut -d'=' -f 2-
      )

      _debug_fn "\n\nRAW:    $key" "$val" s

      # Imagine we have a line: HOST=my-host
      # And another line USER_HOME=/home/${HOST} = this a line with interpolated variables. And each `${}` is an
      #   interpolated variable.
      # We wish to parse `/home/${HOST}` such that the final result will be `USER_HOME=/home/my-host`. This
      # means each interpolated variable will be replaced by its concrete value. We assume that the concrete value must
      # have been read and parsed from a preceeding line.

      # _interpolated_variable_without_brackets=HOST
      for _interpolated_variable_without_brackets in $(echo "$val" | grep -Po '\$\{\K.+?(?=\})'); do
        _debug_fn "_interpolated_variable_without_brackets" "$_interpolated_variable_without_brackets"

        # _interpolated_variable_with_brackets=${HOST}
        _interpolated_variable_with_brackets="\${$_interpolated_variable_without_brackets}"
        _debug_fn "_interpolated_variable_with_brackets" "$_interpolated_variable_with_brackets"

        _interpolated_variable_concrete_value="${_env_key_to_value_map[$_interpolated_variable_without_brackets]:-}"
        _debug_fn "_interpolated_variable_concrete_value user env file" "$_interpolated_variable_concrete_value"

        # Imagine you have interpolated variable _interpolated_variable_without_brackets=PWD. PWD is a bash variable
        # which means we may not have the value from preceeding lines.
        # The following expression will turn the value stored in `_interpolated_variable_without_brackets` into a
        # variable ($PWD) and expand it (so we get /some/path).
        if [[ -z "$_interpolated_variable_concrete_value" ]]; then
          _interpolated_variable_concrete_value=${!_interpolated_variable_without_brackets}
          _debug_fn "_interpolated_variable_concrete_value shell env" "$_interpolated_variable_concrete_value"
        fi

        # Replace each interpolated variable with its concrete value.
        val="${val//$_interpolated_variable_with_brackets/$_interpolated_variable_concrete_value}"

        _debug_fn "value1" "$val"
      done

      # Remove all quotes.
      if echo "$val" | grep -qP "^[\"'].+[\"']$"; then
        val="$(
          echo "$val" |
            sed -nE "s/^['\"](.+)['\"]$/\1/p"
        )"
      fi

      _debug_fn "value2" "$val"
      _env_key_to_value_map["$key"]="${val}"
    fi
  done <<<"${_in_file_content}"

  cd - &>/dev/null
}

_parse_variables_in_in_infile

if [[ -n "$_out_filename" ]]; then
  if [[ -e "$_out_filename" ]]; then
    # File exists - get absolute file path
    _out_file_full_path_name=$(readlink -f "$_out_filename")
  else
    _out_file_full_path_name=$(_resolve_rel_to_abs_path "$_out_filename")
  fi
fi

if _should_output_to_file; then
  rm -rf "$_out_file_full_path_name"
  touch "$_out_file_full_path_name"
fi

_out_file_content_accumulator=

for key in "${!_env_key_to_value_map[@]}"; do
  _value="${_env_key_to_value_map[$key]}"

  # If the value is not all numeric characters we handle quoting.
  if ! echo "$_value" | grep -q -P "^\d+$"; then
    if [[ -n "$_format" ]]; then
      # Always quote json string.
      if [[ "$_format" == "json" ]]; then
        _value="\"$_value\""

      # Quote yaml string only if not empty.
      elif [[ -n "$_value" ]]; then
        _value="\"$_value\""
      fi
    else
      # Use a single quote for shell strings. (Why??)
      if [[ -n "$_value" ]]; then
        _value="'$_value'"
      fi
    fi
  fi

  # Formatting
  if [[ "$_format" = yml ]] || [[ "$_format" = yaml ]]; then
    # key: value
    _key_value_line="${key}: $_value"
  elif [[ "$_format" = json ]]; then
    # "key": value
    _key_value_line="\"$key\": $_value,"
  else
    _key_value_line="${key}=${_value}"
  fi

  if _should_output_to_file; then
    echo "$_key_value_line" >>"$_out_file_full_path_name"
  else
    _out_file_content_accumulator="$_key_value_line $_out_file_content_accumulator"
  fi
done

# Output/exec
if [[ -n "$_command_to_exec" ]]; then
  cmd="$_out_file_content_accumulator $_command_to_exec"

  if [[ -n "$cwd" ]]; then
    cmd="( cd $cwd; $cmd  )"
  fi

  eval "$cmd"

elif [[ -n "$_should_output_to_stdout" ]]; then
  # Output to stdout

  echo "$_out_file_content_accumulator"
else
  # Output to file.

  sort "$_out_file_full_path_name" -o "$_out_file_full_path_name"
fi
