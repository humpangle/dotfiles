#!/usr/bin/env bash
# shellcheck disable=2034,2209,2135,2155,2046,2251
# More safety, by turning some bugs into errors.
# Without `errexit` you don’t need ! and can replace
# ${PIPESTATUS[0]} with a simple $?, but I prefer safety.
set -o errexit
set -o pipefail
set -o noclobber
# set -o nounset

function usage {
  set +o errexit

  read -r -d '' var <<'eof'
Usage:
  p-env input-env-file [OPTIONS]

Options:
  --help/-h                         Print this help text and exit.
  --debug/-d                        Print each line of `variable=value` as it is read.
  --string/-s                       Output string to stdout instead of writing to a file.
  --output/-o /some/file            Specify output file. If `--string` option is specified, this option will be ignored.
                                    If this option is not specified, we do not want to output to stdout and we are not
                                    executing a command, we will set the output filename to the input filename suffixed
                                    with `.n`
  --format/-f format-name           Specify output format. Valid format names are yaml,yml,json.
  --exec/-e command                 Execute a command, passing the environment variables to the command.
  --cwd                             Works with `--exec` option. Change current working directory before executing command.

Examples:
  p-env --help
  p-env input-env-file --output /output/file --format json
eof

  echo -e "${var}"
  exit "${1:-2}"
}

_out_filename=
_format=
_in_filename=
_in_file_content=
_should_output_to_stdout=
_command_to_exec=
cwd=
debug=

function parse-args {
  # -allow a command to fail with !’s side effect on errexit
  # -use return value from ${PIPESTATUS[0]}, because ! hosed $?
  ! getopt --test >/dev/null
  if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "I’m sorry, $(getopt --test) failed in this environment."
    exit 1
  fi

  long_options=string,debug,format:,output:,exec:,cwd:,no-change-name,env-name:,help
  short_options=sdf:o:e:v,n,a:,h

  # -regarding ! and PIPESTATUS see above
  # -temporarily store output to be able to check for errors
  # -activate quoting/enhanced mode (e.g. by writing out “--options”)
  # -pass arguments only via   -- "$@"   to separate them correctly
  ! parsed_output=$(getopt --options=$short_options --longoptions=$long_options --name="$0" -- "$@")
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    usage
  fi

  # read getopt’s output this way to handle the quoting right:
  eval set -- "$parsed_output"

  # now enjoy the options in order and nicely split until we see --
  while true; do
    case "$1" in
    -h | --help)
      usage 0
      ;;

    -s | --string)
      _should_output_to_stdout=y
      shift
      ;;

    -d | --debug)
      debug=y
      shift
      ;;

    -f | --format)
      _format="$2"
      shift 2
      ;;

    -o | --output)
      _out_filename="$2"
      shift 2
      ;;

    -e | --exec)
      _command_to_exec="$2"
      shift 2
      ;;

    --cwd)
      cwd="$2"
      shift 2
      ;;

      # -- means the end of the arguments; drop this, and break out of the
      # while loop
    --)
      shift
      break
      ;;

    *)
      echo "Unexpected option: $1."
      usage
      ;;
    esac
  done

  # handle non-option arguments
  if [[ $# -ne 1 ]]; then
    echo "$0: File containing environment variable is required."
    usage 4
  fi

  _in_filename="$1"
}

function _should_output_to_file {
  if [[ -z "${_should_output_to_stdout}" ]] &&
    [[ -z "$_command_to_exec" ]]; then
    return 0
  else
    return 1
  fi
}

parse-args "$@"

_in_file_full_path_name="$(realpath "$_in_filename")"
_in_file_content="$(cat "$_in_file_full_path_name")"

_out_file_full_path_name="${_in_file_full_path_name}.n"

declare -A _env_key_to_value_map=()

line_regex="^[^#]+.+"

while read -r line; do
  if [[ "$line" =~ $line_regex ]]; then
    key=$(echo "$line" | cut -d '=' -f 1)
    val=$(echo "$line" | cut -d'=' -f 2-)

    [[ -n "$debug" ]] && echo "$key=$val"

    # Imagine we have a line: HOST=my-host
    # And another line USER_HOME=/home/${HOST} = this a line with interpolated variables. And each `${}` is an
    #   interpolated variable.
    # We wish to parse `/home/${HOST}` such that the final result will be `USER_HOME=/home/my-host`. This
    # means each interpolated variable will be replaced by its concrete value. We assume that the concrete value must
    # have been read and parsed from a preceeding line.

    # _interpolated_variable_without_brackets=HOST
    for _interpolated_variable_without_brackets in $(echo "$val" | grep -Po '\$\{\K.+?(?=\})'); do
      # _interpolated_variable_with_brackets=${HOST}
      _interpolated_variable_with_brackets="\${$_interpolated_variable_without_brackets}"

      _interpolated_variable_concrete_value="${_env_key_to_value_map[$_interpolated_variable_without_brackets]:-}"

      # Imagine you have interpolated variable _interpolated_variable_without_brackets=PWD. PWD is a bash variable
      # which means we may not have the value from preceeding lines.
      # The following expression will turn the value stored in `_interpolated_variable_without_brackets` into a
      # variable ($PWD) and expand it (so we get /some/path).
      if [[ -z "$_interpolated_variable_concrete_value" ]]; then
        _interpolated_variable_concrete_value=${!_interpolated_variable_without_brackets}
      fi

      # Replace each interpolated variable with its concrete value.
      val="${val//$_interpolated_variable_with_brackets/$_interpolated_variable_concrete_value}"
    done

    _env_key_to_value_map["$key"]="${val}"
  fi
done <<<"${_in_file_content}"

if [[ -n "$_out_filename" ]]; then
  _out_file_full_path_name=$(realpath "$_out_filename")
fi

if _should_output_to_file; then
  rm -rf "$_out_file_full_path_name"
  touch "$_out_file_full_path_name"
fi

_out_file_content_accumulator=

for key in "${!_env_key_to_value_map[@]}"; do
  _value="${_env_key_to_value_map[$key]}"

  # Sometimes, we will get a `_value` such as `""/app/___outs"/cert"/selfsigned_key.pem` where the `"` are messed up.
  # We just strip all `"` from all values.
  _value="${_value//\"/}"

  if [[ -n "$_format" ]]; then
    # If the value is not all numeric characters and we are formatting in yaml|json, surround with `""`
    if ! echo "$_value" | grep -q -P "^ *\d+ *$"; then
      _value="\"$_value\""
    fi
  fi

  # Formatting
  if [[ "$_format" = yml ]] || [[ "$_format" = yaml ]]; then
    # key: value
    _key_value_line="${key}: $_value"
  elif [[ "$_format" = json ]]; then
    # "key": value
    _key_value_line="\"$key\": $_value,"
  else
    _key_value_line="${key}=${_value}"
  fi

  if _should_output_to_file; then
    echo "$_key_value_line" >>"$_out_file_full_path_name"
  else
    _out_file_content_accumulator="$_key_value_line $_out_file_content_accumulator"
  fi
done

# Output/exec
if [[ -n "$_command_to_exec" ]]; then
  cmd="$_out_file_content_accumulator $_command_to_exec"

  if [[ -n "$cwd" ]]; then
    cmd="( cd $cwd; $cmd  )"
  fi

  eval "$cmd"

elif [[ -n "$_should_output_to_stdout" ]]; then
  # Output to stdout

  echo "$_out_file_content_accumulator"
else
  # Output to file.

  sort "$_out_file_full_path_name" -o "$_out_file_full_path_name"
fi
