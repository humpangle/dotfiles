#!/usr/bin/env bash

set -o errexit

_REQUIRED_ENVS=(
  CONTAINER_OPEN_WEB_UI_NAME
  CONTAINER_OPEN_WEB_UI_MAP_VOLUME_DATA
  CONTAINER_OPEN_WEB_UI_PUBLISH_PORT
  CONTAINER_OPEN_WEB_UI_RESTART_VALUE
)

_raise_on_no_env() {
  for _env_name in "${_REQUIRED_ENVS[@]}"; do
    printf -v _env_val "%q" "${!_env_name}"

    if [ "$_env_val" == "''" ]; then
      echo -e "'$_env_name' environment variable is missing"
      exit 1
    fi
  done
}

owups() {
  : "___alias___ open_web_ui_ps"
  open_web_ui_ps "$@"
}

open_web_ui_ps() {
  : "Get various values about open web UI and its environment."

  _raise_on_no_env

  local _data=

  for _env_name in "${_REQUIRED_ENVS[@]}"; do
    printf -v _env_val "%q" "${!_env_name}"

    if [ "$_env_val" == "''" ]; then
      echo -e "'$_env_name' environment variable is missing"
      exit 1
    fi

    _data+="$_env_name = $_env_val\n"
  done

  echo -e "\n$_data"
  _open_web_ui_ps
  echo ""
}

_open_web_ui_ps() {
  docker ps --filter name="$CONTAINER_OPEN_WEB_UI_NAME"
}

owuk() {
  : "___alias___ open_web_ui_stop"
  open_web_ui_stop "$@"
}

open_web_ui_stop() {
  : "Stop open web UI."

  _raise_on_no_env

  docker stop "$CONTAINER_OPEN_WEB_UI_NAME" &>/dev/null || true
  _open_web_ui_ps
}

_ollama_exists() {
  if ! command -v ollama &>/dev/null; then
    echo "Ollama has not been installed. Visit https://ollama.com/download for installation instruction."
    return 1
  fi

  return 0
}

___ollama_ps_help() {
  read -r -d '' var <<'eof' || true
Get various information about the ollama server. Usage:
  ollama_ps [OPTIONS]

Options:
  --help/-h
    Print this help text and quit.
  --verbose/-v
    Get enriched information about the ollama server.
  --quiet/-q
    Get exit status whether olla running or not. 0 = running / 1 = not running.
  --info/-i
    Get an associative array of port and pid of running ollama server.


Examples:
  # Get help.
  ollama_ps --help

  # Get detailed information.
  ollama_ps --verbose
  ollama_ps -v

  # Get exit status whether olla running or not
  ollama_ps --quiet

  # Get information for scripting.
  declare -A info_=()
  ollama_ps --quiet --info info_
  echo "${info_['pid']}" # 1234
  echo "${info_['port']}" # 1234
eof

  echo -e "${var}\n"
}

owus() {
  : "___alias___ open_web_ui_start"
  open_web_ui_start "$@"
}

open_web_ui_start() {
  : "Start open web UI."

  _raise_on_no_env

  _container_running="$(
    docker ps --quiet --filter name="$CONTAINER_OPEN_WEB_UI_NAME"
  )"

  if [ -n "$_container_running" ]; then
    echo "Open web UI already running with container ID: $_container_running"
    return 1
  fi

  local _success
  local _start_result
  local _cmd
  local _container_exists
  local _container_running

  _container_exists="$(
    docker ps --all --quiet --filter name="$CONTAINER_OPEN_WEB_UI_NAME"
  )"

  if [ -n "$_container_exists" ]; then
    _cmd="docker restart $CONTAINER_OPEN_WEB_UI_NAME"
  else
    _cmd="docker run \
      --name $CONTAINER_OPEN_WEB_UI_NAME \
      -d \
      -p $CONTAINER_OPEN_WEB_UI_PUBLISH_PORT:8080 \
      --add-host=host.docker.internal:host-gateway \
      -v $CONTAINER_OPEN_WEB_UI_MAP_VOLUME_DATA:/app/backend/data \
      --restart $CONTAINER_OPEN_WEB_UI_RESTART_VALUE \
      $(_open_web_ui_nvidia_docker_image)"
  fi

  echo -e "Executing command:\n$_cmd"

  if _start_result=$(bash -c "$_cmd" 2>&1 | tee /dev/tty); then
    _success=1
    ollama_start || true
  fi

  if [[ -n "$_success" ]]; then
    echo "Open Web UI running on port $CONTAINER_OPEN_WEB_UI_PUBLISH_PORT"
    return
  fi

  echo "$_start_result"
  return 1
}

_open_web_ui_nvidia_docker_image() {
  if _nvidia &>/dev/null; then
    echo "--gpus all ghcr.io/open-webui/open-webui:cuda"
  else
    echo "ghcr.io/open-webui/open-webui:main"
  fi
}

ops() {
  : "___alias___ ollama_ps"
  ollama_ps "$@"
}

ollama_ps() {
  : "___help___ ___ollama_ps_help"

  local ollama_info_string_

  ollama_info_string_="$(
    sudo lsof -c ollama -P -s TCP:LISTEN 2>/dev/null |
      awk 'match($0, ":([0-9]+)", a) {print $2,a[1]}'
  )"

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local quiet_
  local verbose_=1

  local _parsed
  if ! _parsed="$(
    getopt \
      --longoptions=help,quiet,info:,verbose \
      --options=h,q,i:,v \
      --name "$0" \
      -- "$@"
  )"; then
    ___ollama_ps_help
    return 129
  fi

  # Provides proper quoting.
  eval set -- "$_parsed"

  while true; do
    case "$1" in
    --help | -h)
      ___ollama_ps_help
      return
      ;;

    --quiet | -q)
      quiet_=1
      shift
      ;;

    --info | -i)
      local -n return_value_=$2
      shift 2
      ;;

    --verbose | -v)
      verbose_=1
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      Echo "Unknown option ${1}."
      ___ollama_ps_help
      return 129
      ;;
    esac
  done

  if [ -n "$quiet_" ]; then
    verbose_=""
  fi

  if [[ -n "$verbose_" ]] &&
    [[ -z "$ollama_info_string_" ]]; then
    echo "Ollama is not running."
    return 1
  fi

  if [[ -n "$quiet_" ]] &&
    [[ -z "$ollama_info_string_" ]]; then
    return 1
  fi

  IFS=' ' read -r -a _array <<<"$ollama_info_string_"

  local _pid="${_array[0]}"
  local _port="${_array[1]}"

  return_value_["pid"]="$_pid"
  # shellcheck disable=2034
  return_value_["port"]="$_port"

  if [[ -n "$verbose_" ]]; then
    echo -e "Ollama is running:"
    echo -e "PID = $_pid"
    echo -e "Port = $_port"
  fi
}

os() {
  : "___alias___ ollama_start"
  ollama_start "$@"
}

ollama_start() {
  : "Start Ollama if not started."

  if ! _ollama_exists; then
    return 1
  fi

  if ! ollama_ps --quiet; then
    ollama serve &>/dev/null &
    disown
  fi

  ollama_ps --verbose
}

ok() {
  : "___alias___ ollama_stop"
  ollama_stop "$@"
}

ollama_stop() {
  : "Stop Ollama if running."

  if ! _ollama_exists; then
    return 1
  fi

  declare -A info_=()

  if ! ollama_ps --quiet --info info_; then
    return
  fi

  local _pid="${info_['pid']}"
  sudo kill -s KILL "$_pid"
  echo "Ollama serving on PID/PORT $_pid/${info_[port]} stopped."
}

_get_dotfiles_root() {
  # directory where this file (script) resides
  # dotfiles/scripts/_ai
  local scripts_dir_=""

  # dotfiles/scripts/.. => dotfiles/
  local dotfiles_root_=""

  scripts_dir_="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
  dotfiles_root_="$(dirname "$scripts_dir_")"

  echo "$dotfiles_root_"
}

llmprojs() {
  : "___alias___ llm_project_start"
  llm_project_start "$@"
}

llm_project_start() {
  : "Ensure the claude chat template file exists in the current directory."

  local dotfiles_root_=""
  dotfiles_root_="$(_get_dotfiles_root)"
  local llm_templates_root_="$dotfiles_root_/llm-templates/claude/.claude"
  local cwd_=""
  cwd_="$(pwd)"

  # Copy chat template
  if [ ! -e "$cwd_/.claude.ebnis.chat.md" ]; then
    cp \
      "$llm_templates_root_/claude.ebnis.chat.md" \
      "$cwd_/.claude.ebnis.chat.md"
  fi

  # Copy settings.local.json if it doesn't exist
  mkdir -p "$cwd_/.claude"
  mkdir -p "$cwd_/.cursor"

  #### Copy from dotfiles .claude/settings.local.json to project .claude/settings.local.json
  local claude_target_settings_="$cwd_/.claude/settings.local.json"
  local claude_source_settings_="$llm_templates_root_/settings.local.template.json"

  if [[ -f "$claude_source_settings_" ]] && [[ ! -e "$claude_target_settings_" ]]; then
    echo "Copying Claude settings..."
    cp "$claude_source_settings_" "$claude_target_settings_"
    json-purify "$claude_target_settings_" --inline
    echo "Created '.claude/settings.local.json' from template."
  fi

  #### Copy from dotfiles .cursor/cli.json to project .cursor/cli.json
  local cursor_target_settings_="$cwd_/.cursor/cli.json"
  local cursor_source_settings_="$llm_templates_root_/cli.template.json"

  if [[ -f "$cursor_source_settings_" ]] && [[ ! -e "$cursor_target_settings_" ]]; then
    echo "Copying Claude settings..."
    cp "$cursor_source_settings_" "$cursor_target_settings_"
    json-purify "$cursor_target_settings_" --inline
    echo "Created '.cursor/cli.json' from template."
  fi

  #### Link dotfiles commands to project .llm_name/commands
  local source_commands_="$llm_templates_root_/commands"

  if [[ -d "$source_commands_" ]]; then
    for llm_name_ in claude cursor; do
      llm_name_=".$llm_name_"
      local target_commands_="$cwd_/$llm_name_/commands"

      mkdir -p "$target_commands_"

      for file in "$source_commands_"/*; do
        local target_file=""
        target_file="$target_commands_/$(basename "$file")"

        if [ -e "$target_file" ]; then
          echo "Removing: $target_file"
        fi
        rm -f "$target_file"

        echo "Linking $file -> $target_file"
        ln -s "$file" "$target_file"

        if [ -f "$target_file" ]; then
          echo "Linked $file -> $target_file"
        fi

        echo
      done

      echo

    done
  fi
}

_is_local_function() {
  local _function_name="$1"
  local _this_file_content="$2"

  # Function name is not a local function - but perhaps inherited from the shell.
  if ! grep -qP "^$_function_name\(\)\s+\{" <<<"$_this_file_content" &&
    ! grep -qP "function\s+${_function_name}\s+{" <<<"$_this_file_content"; then
    return 1
  fi

  return 0
}

_command_exists() {
  local command_to_test_="$1"
  local this_file_content_=""
  this_file_content_="$(cat "$0")"

  local all_function_names_=()
  mapfile -t all_function_names_ < <(
    compgen -A function
  )

  local func_name_=""
  for func_name_ in "${all_function_names_[@]}"; do
    if ! _is_local_function "$func_name_" "$this_file_content_"; then
      continue
    fi

    if [[ "$func_name_" == "$command_to_test_" ]]; then
      return 0
    fi
  done

  return 1
}

___help_help() {
  local _usage

  read -r -d '' _usage <<'eom' || :
Get documentation about available commands/functions. Usage:
  _ai help [OPTIONS]

By default, we return only external functions unless option `i` is passed in which case we return only internal
(helper) functions or option `a` is given which causes us to print both internal and external functions.

Options:
  -h
    Print this helper information and exit.
  -i
    Return only internal (helper) functions.
  -a
    Return all functions - both internal and external.
  -p
    Prepend prefix i.e. _func_name ----------- to every line so developer can grep the functon name and get all
    documentation strings for that function name. Without this option, caller may only get examples where the functon
    name is referenced.

Examples:
  # Get help
  _ai help -h

  # Grep for command/function documentation
  _ai help -p | grep ^func_or_command_name
eom

  echo -e "$_usage"
}

help() {
  : "___help___ ___help_help"
  local function_type_="external"
  local include_prefix_=""

  local opt_=""
  while getopts ':aip' opt_; do
    case "$opt_" in
    a)
      function_type_='all'
      ;;

    i)
      function_type_='internal'
      ;;

    p)
      include_prefix_=1
      ;;

    *)
      ___help_help
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  # Matching pattern examples:
  # `: "___help___ ___some_func_help"`
  # `: "___help___ ____some-func-help"`
  local _help_func_pattern="[_]*___[a-zA-Z][a-zA-Z0-9_-]*[_-]help"

  local function_names_=()

  if [ "$function_type_" = external ]; then
    # External functions do not start with _.
    mapfile -t function_names_ < <(
      compgen -A function |
        grep -v '^_'
    )
  elif [ "$function_type_" = internal ]; then
    # Internal helper functions start with _, but not __
    mapfile -t function_names_ < <(
      compgen -A function |
        grep '^_' |
        grep -v '^__' |
        grep -v -E "$_help_func_pattern"
    )
  elif [ "$function_type_" = all ]; then
    mapfile -t function_names_ < <(
      compgen -A function |
        grep -v '^__' |
        grep -v -E "$_help_func_pattern"
    )
  fi

  local this_file_content_=""
  this_file_content_="$(cat "$0")"

  local longest_func_name_len_=0
  local func_name_len_=0
  declare -A name_to_len_map_=()

  local func_name_=""
  for func_name_ in "${function_names_[@]}"; do
    func_name_len_="${#func_name_}"
    name_to_len_map_["$func_name_"]="${func_name_len_}"
    if [[ "${func_name_len_}" -gt "${longest_func_name_len_}" ]]; then
      longest_func_name_len_=${func_name_len_}
    fi
  done

  declare -A all_output_=()
  declare -A _aliases=()
  declare -A name_spaces_map_=()

  longest_func_name_len_=$((longest_func_name_len_ + 10))

  local output_prefix_=""

  for func_name_ in "${function_names_[@]}"; do
    if ! _is_local_function "$func_name_" "$this_file_content_"; then
      continue
    fi

    local spaces_=""
    func_name_len_="${name_to_len_map_[$func_name_]}"
    func_name_len_=$((longest_func_name_len_ - func_name_len_))

    for _ in $(seq "${func_name_len_}"); do
      spaces_+="-"
    done

    local function_def_text_=""
    function_def_text_="$(type "${func_name_}")"

    local alias_name_=""

    # Matching pattern example:
    # `: "___alias___ install-elixir"`
    alias_name_="$(
      sed -n \
        's/^ *: *"___alias___ *\([a-zA-Z_-][a-zA-Z0-9_-]*\).*/\1/p' \
        <<<"${function_def_text_}"
    )"

    if [[ -n "${alias_name_}" ]]; then
      _aliases["${alias_name_}"]="${_aliases["${alias_name_}"]} ${func_name_}"
      continue
    fi

    local help_func_=""
    help_func_="$(
      # Given:
      # `: "___help___ ___some_func_help"`
      # Then we extract "___some_func_help" into variable help_func_
      sed -nE \
        "s/^[[:space:]]+:[[:space:]]*\"___help___[[:space:]]+([a-zA-Z0-9_-]*).*/\1/p" \
        <<<"${function_def_text_}"
    )"

    # Get the whole function definition text and extract only the documentation
    # part.
    local doc_lines_=()
    if [[ -n "$help_func_" ]]; then
      # So we have a helper function - we just eval the helper function and split by new lines.
      mapfile -t doc_lines_ < <(
        eval "$help_func_" 2>/dev/null
      )
    else
      # Function is not using a helper function but documentation texts - so we extract the documentation texts and
      # split by new lines.
      mapfile -t doc_lines_ < <(
        # ^              Assert position at the start of the line
        # [[:space:]]*   Match any whitespace (spaces, tabs) zero or more times
        # :              Match a literal colon
        # [[:space:]]?   Match an optional whitespace
        # \"(.*)\"       Match a quoted string and capture the content within the quotes (documentation text)
        # ;              Match a semicolon (shell line termination placed there by command: type _func_name)
        #
        # Examples:
        # : "This is a documentation line";
        # :"This is a documentation line";
        sed -nEe "s/^[[:space:]]*: ?\"(.*)\";/\1/p" <<<"$function_def_text_"
      )
    fi

    local output_=""
    output_prefix_="$func_name_ $spaces_ "

    if [[ -n "${doc_lines_[*]}" ]]; then
      if [ -z "$include_prefix_" ]; then
        output_+="${output_prefix_}\n"
        output_prefix_=""
      fi

      for _doc in "${doc_lines_[@]}"; do
        # _func_name -------------------- List tmux sessions and clients. Usage:
        output_+="${output_prefix_}$_doc\n"
      done
    else
      # _func_name -------------------- *************
      output_="${output_prefix_}*************\n"
    fi

    all_output_["$func_name_"]="$output_"
    name_spaces_map_["$func_name_"]="$output_prefix_"
  done

  for func_name_ in "${!all_output_[@]}"; do
    output_="${all_output_["$func_name_"]}"
    echo -e "$output_"

    local alias_names_="${_aliases["$func_name_"]}"

    if [[ -n "${alias_names_}" ]]; then
      echo -e "${name_spaces_map_["$func_name_"]} ALIASES: ${alias_names_}\n\n"
    fi
  done
}

if [ -z "$1" ]; then
  help "$@"
elif [[ "$1" == "help" ]]; then
  help "${@:2}"
elif [[ "$1" == -h* || "$1" == -i* || "$1" == -a* || "$1" == -p* ]]; then
  help "$@"
elif _command_exists "$1"; then
  "$@"
else
  echo "Command not found \"$1\". Type \"help -a\" for available commands." >&2
  exit 127
fi
