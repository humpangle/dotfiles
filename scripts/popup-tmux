#!/usr/bin/env bash
# shellcheck disable=

global_session_name_=${DEFAULT_TMUX_SESSION:-dot}

run-default() {
  _do-popup \
    "$global_session_name_"
}

run-other() {
  if [ -z "$TMUX_POPUP_SESSION_NAME_AND_PATH" ]; then
    run-default
    return
  fi

  # TMUX_POPUP_SESSION_NAME_AND_PATH=some-session-name:/some/path
  IFS=: read -ra session_and_path_array_ <<<"$TMUX_POPUP_SESSION_NAME_AND_PATH"

  local popup_session_name_="${session_and_path_array_[0]}"
  popup_session_name_="${popup_session_name_%-pop}"
  popup_session_name_+="-pop"

  local path_=""
  path_"$(
    realpath "${session_and_path_array_[1]}"
  )"

  _do-popup \
    -p "$path_" \
    "$popup_session_name_"
}

_do-popup() {
  local opt_
  local width_="90%"
  local height_="90%"
  local session_path_="$HOME/dotfiles"

  while getopts "w:h:p:" opt_; do
    case "$opt_" in
    w)
      width_="$OPTARG"
      ;;
    h)
      height_="$OPTARG"
      ;;
    p)
      session_path_="$OPTARG"
      ;;
    *)
      echo "Unknown option $OPTARG "
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  local popup_session_name_="$1"

  local running_session_=""
  running_session_="$(tmux display-message -p -F "#{session_name}")"

  # If we already have a popup session running, quit it - we do not want nested popup sessions.
  if [ "$running_session_" = "$popup_session_name_" ] ||
    [ "$running_session_" = "$global_session_name_" ] || # TODO: this will be problematic if launched not from popup.
    grep -qP -- "-pop$" <<<"$running_session_"; then
    tmux detach-client
    return
  fi

  tmux display-popup \
    -d "$session_path_" \
    -w "$width_" \
    -h "$height_" \
    -e TMUX_POPUP_SESSION="$popup_session_name_" \
    -E \
    "tmux attach -t $popup_session_name_ || tmux new -s $popup_session_name_"
}

# -----------------------------------------------------------------------------
# HELP FUNC
# -----------------------------------------------------------------------------

_is_local_function() {
  local _function_name="$1"
  local _this_file_content="$2"

  # Function name is not a local function - but perhaps inherited from the shell.
  if ! grep -qP "^$_function_name\(\)\s+\{" <<<"$_this_file_content" &&
    ! grep -qP "function\s+${_function_name}\s+{" <<<"$_this_file_content"; then
    return 1
  fi

  return 0
}

_command_exists() {
  local command_to_test_="$1"
  local this_file_content_=""
  this_file_content_="$(cat "$0")"

  local all_function_names_=()
  mapfile -t all_function_names_ < <(
    compgen -A function
  )

  local func_name_=""
  for func_name_ in "${all_function_names_[@]}"; do
    if ! _is_local_function "$func_name_" "$this_file_content_"; then
      continue
    fi

    if [[ "$func_name_" == "$command_to_test_" ]]; then
      return 0
    fi
  done

  return 1
}

___help_help() {
  local _usage

  read -r -d '' _usage <<'eom' || :
Get documentation about available commands/functions. Usage:
  script_or_executable help [OPTIONS]

By default, we return only external functions unless option `i` is passed in which case we return only internal
(helper) functions or option `a` is given which causes us to print both internal and external functions.

Options:
  -h
    Print this helper information and exit.
  -i
    Return only internal (helper) functions.
  -a
    Return all functions - both internal and external.
  -p
    Prepend prefix i.e. _func_name ----------- to every line so developer can grep the functon name and get all
    documentation strings for that function name. Without this option, caller may only get examples where the functon
    name is referenced.

Examples:
  # Get help
  script_or_executable help -h

  # Grep for command/function documentation
  script_or_executable help -p | grep ^func_or_command_name
eom

  echo -e "$_usage"
}

help() {
  : "___help___ ___help_help"
  local function_type_="external"
  local include_prefix_=""

  local opt_=""
  while getopts ':aip' opt_; do
    case "$opt_" in
    a)
      function_type_='all'
      ;;

    i)
      function_type_='internal'
      ;;

    p)
      include_prefix_=1
      ;;

    *)
      ___help_help
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  # Matching pattern examples:
  # `: "___help___ ___some_func_help"`
  # `: "___help___ ____some-func-help"`
  local _help_func_pattern="[_]*___[a-zA-Z][a-zA-Z0-9_-]*[_-]help"

  local function_names_=()

  if [ "$function_type_" = external ]; then
    # External functions do not start with _.
    mapfile -t function_names_ < <(
      compgen -A function |
        grep -v '^_'
    )
  elif [ "$function_type_" = internal ]; then
    # Internal helper functions start with _, but not __
    mapfile -t function_names_ < <(
      compgen -A function |
        grep '^_' |
        grep -v '^__' |
        grep -v -E "$_help_func_pattern"
    )
  elif [ "$function_type_" = all ]; then
    mapfile -t function_names_ < <(
      compgen -A function |
        grep -v '^__' |
        grep -v -E "$_help_func_pattern"
    )
  fi

  local this_file_content_=""
  this_file_content_="$(cat "$0")"

  local longest_func_name_len_=0
  local func_name_len_=0
  declare -A name_to_len_map_=()

  local func_name_=""
  for func_name_ in "${function_names_[@]}"; do
    func_name_len_="${#func_name_}"
    name_to_len_map_["$func_name_"]="${func_name_len_}"
    if [[ "${func_name_len_}" -gt "${longest_func_name_len_}" ]]; then
      longest_func_name_len_=${func_name_len_}
    fi
  done

  declare -A all_output_=()
  declare -A _aliases=()
  declare -A name_spaces_map_=()

  longest_func_name_len_=$((longest_func_name_len_ + 10))

  local output_prefix_=""

  for func_name_ in "${function_names_[@]}"; do
    if ! _is_local_function "$func_name_" "$this_file_content_"; then
      continue
    fi

    local spaces_=""
    func_name_len_="${name_to_len_map_[$func_name_]}"
    func_name_len_=$((longest_func_name_len_ - func_name_len_))

    for _ in $(seq "${func_name_len_}"); do
      spaces_+="-"
    done

    local function_def_text_=""
    function_def_text_="$(type "${func_name_}")"

    local alias_name_=""

    # Matching pattern example:
    # `: "___alias___ install-elixir"`
    alias_name_="$(
      sed -n \
        's/^ *: *"___alias___ *\([a-zA-Z_-][a-zA-Z0-9_-]*\).*/\1/p' \
        <<<"${function_def_text_}"
    )"

    if [[ -n "${alias_name_}" ]]; then
      _aliases["${alias_name_}"]="${_aliases["${alias_name_}"]} ${func_name_}"
      continue
    fi

    local help_func_=""
    help_func_="$(
      # Given:
      # `: "___help___ ___some_func_help"`
      # Then we extract "___some_func_help" into variable help_func_
      sed -nE \
        "s/^[[:space:]]+:[[:space:]]*\"___help___[[:space:]]+([a-zA-Z0-9_-]*).*/\1/p" \
        <<<"${function_def_text_}"
    )"

    # Get the whole function definition text and extract only the documentation
    # part.
    local doc_lines_=()
    if [[ -n "$help_func_" ]]; then
      # So we have a helper function - we just eval the helper function and split by new lines.
      mapfile -t doc_lines_ < <(
        eval "$help_func_" 2>/dev/null
      )
    else
      # Function is not using a helper function but documentation texts - so we extract the documentation texts and
      # split by new lines.
      mapfile -t doc_lines_ < <(
        # ^              Assert position at the start of the line
        # [[:space:]]*   Match any whitespace (spaces, tabs) zero or more times
        # :              Match a literal colon
        # [[:space:]]?   Match an optional whitespace
        # \"(.*)\"       Match a quoted string and capture the content within the quotes (documentation text)
        # ;              Match a semicolon (shell line termination placed there by command: type _func_name)
        #
        # Examples:
        # : "This is a documentation line";
        # :"This is a documentation line";
        sed -nEe "s/^[[:space:]]*: ?\"(.*)\";/\1/p" <<<"$function_def_text_"
      )
    fi

    local output_=""
    output_prefix_="$func_name_ $spaces_ "

    if [[ -n "${doc_lines_[*]}" ]]; then
      if [ -z "$include_prefix_" ]; then
        output_+="${output_prefix_}\n"
        output_prefix_=""
      fi

      for _doc in "${doc_lines_[@]}"; do
        # _func_name -------------------- List tmux sessions and clients. Usage:
        output_+="${output_prefix_}$_doc\n"
      done
    else
      # _func_name -------------------- *************
      output_="${output_prefix_}*************\n"
    fi

    all_output_["$func_name_"]="$output_"
    name_spaces_map_["$func_name_"]="$output_prefix_"
  done

  for func_name_ in "${!all_output_[@]}"; do
    output_="${all_output_["$func_name_"]}"
    echo -e "$output_"

    local alias_names_="${_aliases["$func_name_"]}"

    if [[ -n "${alias_names_}" ]]; then
      echo -e "${name_spaces_map_["$func_name_"]} ALIASES: ${alias_names_}\n\n"
    fi
  done
}

if [ -z "$1" ]; then
  run-default
elif [[ "$1" == "help" ]]; then
  help "${@:2}"
elif [[
  "$1" == -h* ||
  "$1" == -i* ||
  "$1" == -a* ||
  "$1" == -p* ]]; then
  help "$@"
elif _command_exists "$1"; then
  "$@"
else
  echo "Command not found \"$1\". Type \"help -a\" for available commands." >&2
  exit 127
fi
