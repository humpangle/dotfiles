#!/usr/bin/env bash

set -o errexit

_REQUIRED_ENVS=(
  CONTAINER_OPEN_WEB_UI_NAME
  CONTAINER_OPEN_WEB_UI_MAP_VOLUME_DATA
  CONTAINER_OPEN_WEB_UI_PUBLISH_PORT
  CONTAINER_OPEN_WEB_UI_RESTART_VALUE
)

_raise_on_no_env() {
  for _env_name in "${_REQUIRED_ENVS[@]}"; do
    printf -v _env_val "%q" "${!_env_name}"

    if [ "$_env_val" == "''" ]; then
      echo -e "'$_env_name' environment variable is missing"
      exit 1
    fi
  done
}

values() {
  : "Get various values about open web UI and its environment."

  _raise_on_no_env

  local _data=

  for _env_name in "${_REQUIRED_ENVS[@]}"; do
    printf -v _env_val "%q" "${!_env_name}"

    if [ "$_env_val" == "''" ]; then
      echo -e "'$_env_name' environment variable is missing"
      exit 1
    fi

    _data+="$_env_name = $_env_val\n"
  done

  echo -e "\n$_data"
  _ps
  echo ""
}

_ps() {
  docker ps --filter name="$CONTAINER_OPEN_WEB_UI_NAME"
}

stop() {
  : "Stop open web UI."

  _raise_on_no_env

  docker stop "$CONTAINER_OPEN_WEB_UI_NAME" &>/dev/null || true
  _ps
}

_ollama_exists() {
  if ! command -v ollama &>/dev/null; then
    echo "Ollama has not been installed. Visit https://ollama.com/download for installation instruction."
    return 1
  fi

  return 0
}

___ollama_ps_help() {
  read -r -d '' var <<'eof' || true
Get various information about the ollama server. Usage:
  ollama_ps [OPTIONS]

Options:
  --help/-h
    Print this help text and quit.
  --verbose/-v
    Get enriched information about the ollama server.
  --status/-s
    Get exit status whether olla running or not. 0 = running / 1 = not running.
  --info/-i
    Get an associative array of port and pid of running ollama server.


Examples:
  # Get help.
  ollama_ps --help

  # Get detailed information.
  ollama_ps --verbose

  # Get exit status whether olla running or not
  ollama_ps --status

  # Get information.
  declare -A _info=()
  ollama_ps --info _info
  ollama_ps --status --info _info
  echo "${_info['pid']}" # 1234
  echo "${_info['port']}" # 1234
eof

  echo -e "${var}\n"
}

ollama_ps() {
  : "___help___ ___ollama_ps_help"

  local _ollama_pid_port_string

  _ollama_pid_port_string="$(
    lsof -c ollama -P -s TCP:LISTEN |
      awk 'match($0, ":([0-9]+)", a) {print $2,a[1]}'
  )"

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local _parsed
  local _status
  local _verbose

  if ! _parsed="$(
    getopt \
      --longoptions=help,status,info:,verbose \
      --options=h,s,i:,v \
      --name "$0" \
      -- "$@"
  )"; then
    ___ollama_ps_help
    return 129
  fi

  # Provides proper quoting.
  eval set -- "$_parsed"

  while true; do
    case "$1" in
    --help | -h)
      ___ollama_ps_help
      return
      ;;

    --status | -s)
      _status=1
      shift
      ;;

    --info | -i)
      local -n _result=$2
      shift 2
      ;;

    --verbose | -v)
      _verbose=1
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      Echo "Unknown option ${1}."
      ___ollama_ps_help
      return 129
      ;;
    esac
  done

  if [[ -n "$_verbose" ]] &&
    [[ -z "$_ollama_pid_port_string" ]]; then
    echo "Ollama is not running."
    return 1
  fi

  if [[ -n "$_status" ]] &&
    [[ -z "$_ollama_pid_port_string" ]]; then
    return 1
  fi

  IFS=' ' read -r -a _array <<<"$_ollama_pid_port_string"

  local _pid="${_array[0]}"
  local _port="${_array[1]}"

  _result["pid"]="$_pid"
  _result["port"]="$_port"

  if [[ -n "$_verbose" ]]; then
    echo -e "Ollama is running:\n  PID = $_pid\n  Port = $_port"
  fi
}

start() {
  : "Start open web UI."

  _raise_on_no_env

  _container_running="$(
    docker ps --quiet --filter name="$CONTAINER_OPEN_WEB_UI_NAME"
  )"

  if [[ -n "$_container_running" ]]; then
    echo "Open web UI already running with container ID: $_container_running"
    return 1
  fi

  local _success
  local _start_result
  local _cmd
  local _container_exists
  local _container_running

  _container_exists="$(
    docker ps --all --quiet --filter name="$CONTAINER_OPEN_WEB_UI_NAME"
  )"

  if [[ -n "$_container_exists" ]]; then
    _cmd="docker restart $CONTAINER_OPEN_WEB_UI_NAME"
  else
    _cmd="docker run \
      --name $CONTAINER_OPEN_WEB_UI_NAME \
      -d \
      -p $CONTAINER_OPEN_WEB_UI_PUBLISH_PORT:8080 \
      --add-host=host.docker.internal:host-gateway \
      -v $CONTAINER_OPEN_WEB_UI_MAP_VOLUME_DATA:/app/backend/data \
      --restart $CONTAINER_OPEN_WEB_UI_RESTART_VALUE \
      ghcr.io/open-webui/open-webui:main 2>&1"
  fi

  echo -e "Executing command:\n$_cmd"

  if _start_result="$(bash -c "$_cmd")"; then
    _success=1
    ollama_start || true
  fi

  if [[ -n "$_success" ]]; then
    echo "Open Web UI running on port $CONTAINER_OPEN_WEB_UI_PUBLISH_PORT"
    return
  fi

  echo "$_start_result"
  return 1
}

ollama_start() {
  : "Start Ollama if not started."

  if ! _ollama_exists; then
    return 1
  fi

  if ! ollama_ps -s; then
    ollama serve &>/dev/null &
    disown
  fi
}

ollama_stop() {
  : "Stop Ollama if running."

  if ! _ollama_exists; then
    return 1
  fi

  declare -A _info=()

  if ! ollama_ps -s -i _info; then
    return
  fi

  local _pid="${_info['pid']}"
  kill -s KILL "$_pid"
  echo "Ollama serving on PID $_pid stopped."
}

help() {
  : "The following tasks are available:"

  # Matching pattern examples:
  # `: "___help___ ___some_func_help"`
  # `: "___help___ ____some-func-help"`
  local _help_func_pattern="[_]*___[a-zA-Z][a-zA-Z0-9_-]*[_-]help"

  if [[ -z "$1" ]]; then
    # Regular functions do not start with _.
    mapfile -t names < <(
      compgen -A function |
        grep -v '^_'
    )
  else
    # Helper functions start with _.
    mapfile -t names < <(
      compgen -A function |
        grep '^_' |
        grep -v -E "$_help_func_pattern"
    )
  fi

  local _this_file_content
  _this_file_content="$(cat "$0")"

  local len=0
  declare -A name_to_len_map=()

  for name in "${names[@]}"; do
    _len="${#name}"
    name_to_len_map["$name"]="${_len}"
    if [[ "${_len}" -gt "${len}" ]]; then len=${_len}; fi
  done

  declare -A _all_output=()
  declare -A _aliases=()
  declare -A _name_spaces_map=()

  len=$((len + 10))

  for name in "${names[@]}"; do
    # Make sure we are only processing function names from this file's content and no names inherited from
    # elsewhere such as the shell.
    if ! grep -qP "^$name\(\)\s+\{" <<<"$_this_file_content" &&
      ! grep -qP "function\s+${name}\s+{" <<<"$_this_file_content"; then
      continue
    fi

    local spaces=""
    _len="${name_to_len_map[$name]}"
    _len=$((len - _len))

    for _ in $(seq "${_len}"); do
      spaces="${spaces}-"
      ((++t))
    done

    local _function_def_text
    _function_def_text="$(type "${name}")"

    local _alias_name

    # Matching pattern example:
    # `: "___alias___ install-elixir"`
    _alias_name="$(awk \
      'match($0, /^ +: *"___alias___ +([a-zA-Z_-][a-zA-Z0-9_-]*)/, a) {print a[1]}' \
      <<<"${_function_def_text}")"

    if [[ -n "${_alias_name}" ]]; then
      _aliases["${_alias_name}"]="${_aliases["${_alias_name}"]} ${name}"
      continue
    fi

    local _help_func

    _help_func="$(
      awk \
        -v _awk_help_func_pattern="$_help_func_pattern" \
        'match($0, "^ +: *\"___help___ +(" _awk_help_func_pattern ")", a) {print a[1]}' \
        <<<"$_function_def_text"
    )"

    # Get the whole function definition text and extract only the documentation
    # part.
    if [[ -n "$_help_func" ]]; then
      mapfile -t _doc_lines < <(
        eval "$_help_func" 2>/dev/null
      )
    else
      mapfile -t _doc_lines < <(
        sed -nEe "s/^[[:space:]]*: ?\"(.*)\";/\1/p" <<<"$_function_def_text"
      )
    fi

    local _output=""

    if [[ -n "${_doc_lines[*]}" ]]; then
      for _doc in "${_doc_lines[@]}"; do
        _output+="$name $spaces $_doc\n"
      done
    else
      _output="$name $spaces *************\n"
    fi

    _all_output["$name"]="$_output"
    _name_spaces_map["$name"]="$name $spaces"
  done

  for name in "${!_all_output[@]}"; do
    _output="${_all_output["${name}"]}"
    echo -e "${_output}"

    local _alias_names="${_aliases["${name}"]}"

    if [[ -n "${_alias_names}" ]]; then
      echo -e "${_name_spaces_map["${name}"]} ALIASES: ${_alias_names}\n\n"
    fi
  done
}

if [[ -z "$1" ]]; then
  start "$@"
elif [[ "$1" == "--help" ]] ||
  [[ "$1" == "-h" ]]; then
  help "${@:2}"
else
  "$@"
fi
