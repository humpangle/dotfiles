#!/bin/bash
# shellcheck disable=1090,2009,2046

set -o errexit
set -o pipefail
set -o noclobber

# -----------------------------------------------------------------------------
# See also for inspiration:
# https://github.com/nickjj/docker-flask-example/blob/main/run
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Extend the search path so you can easily use executable that are not are the
# normal search path
# -----------------------------------------------------------------------------
PATH=./node_modules/.bin:$PATH

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _wait_until {
  command="${1}"
  timeout="${2:-30}"

  echo -e "\n\n\n=Running: $command=\n\n"

  i=0
  until eval "${command}"; do
    ((i++))

    if [ "${i}" -gt "${timeout}" ]; then
      echo -e "\n\n\n=Command: $command="
      echo -e "failed, aborting due to ${timeout}s timeout!\n\n"
      exit 1
    fi

    sleep 1
  done

  echo -e "\n\n\n= Done successfully running: $command =\n\n"
}

function _timestamp {
  date +'%s'
}

function _raise_on_no_env_file {
  if [[ -n "$SOME_ENV_EXISTS" ]]; then
    if [[ "$SOME_ENV_EXISTS" =~ .env.example ]]; then
      printf "\nERROR: env filename can not be .env.example.\n\n"
      exit 1
    fi

    return 0
  fi

  if [[ -z "$1" ]] || [[ ! -e "$1" ]]; then
    printf "\nERROR:env filename has not been provided or invalid.\n"
    printf "You may also source your environment file.\n\n"
    exit 1
  fi
}

function _has_internet {
  if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
    printf 0
  fi

  printf 1
}

function _q {
  # First and last newlines are required in order to pretty print help text
  read -r -d '' var <<'eof'

What does function do. Usage:
  ./run.sh ping-app [OPTIONS]

Options:
  --verbose/-v. Description should be capitalized and end in a period.
  --timeout/-t. Super long
                description's subsequent lines should start at same column as
                first line.

Examples:
  ./run.sh ping-app

eof

  local output
  IFS=''
  while read -r line; do
    next=": \"${line}\" "
    output="${output}\n${next}"
  done <<<"$(printf "%s" "$var")"

  echo -e "${output}\n"

  if command -v xclip &>/dev/null; then
    echo -e "${output}" | xclip -selection c
  fi
}

full_line_len=$(tput cols)

function _echo {
  local text="${*}"
  local equal='='

  local len="${#text}"
  len=$((full_line_len - len))
  local half=$((len / 2 - 1))

  local line=''

  for i in $(seq $half); do
    line="${line}${equal}"
  done

  echo -e "\n${line} ${text} ${line}"
}

# -----------------------------------------------------------------------------
# END HELPER FUNCTIONS
# -----------------------------------------------------------------------------

function build {
  : "Build the project"
  echo "build task not implemented"
}

function default {
  : "Run a default task"
  build
}

function help {
  : "List available tasks."
  : "They can span multiple lines if needed"
  compgen -A function | grep -v "^_" | while read -r name; do
    paste <(printf '%s' "$name") <(type "$name" | sed -nEe 's/^[[:space:]]*: ?"(.*)";/    \1/p')
  done

  printf "\n"
}

TIMEFORMAT=$'\n\n\nTask completed in %3lR\n'
time "${@:-default}"
