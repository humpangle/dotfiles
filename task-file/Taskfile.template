#!/bin/bash
# shellcheck disable=

# set -o errexit
set -o pipefail
set -o noclobber

# -----------------------------------------------------------------------------
# See also for inspiration:
# https://github.com/nickjj/docker-flask-example/blob/main/run
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Extend the search path so you can easily use executables that are not on the
# normal search path
# -----------------------------------------------------------------------------
PATH=./node_modules/.bin:$PATH

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _wait-until {
  command="${1}"
  timeout="${2:-30}"

  _echo "Running: ${command}"

  i=0
  until eval "${command}"; do
    ((i++))

    if [ "${i}" -gt "${timeout}" ]; then
      echo "Command '${command}' failed, aborting due to ${timeout}s timeout!"
      exit 1
    fi

    sleep 1
  done

  _echo "Done successfully running: ${command}"
}

function _timestamp {
  date +'%s'
}

function _raise_on_no_env_file {
  if [[ -z "${ENV_FILENAME}" ]] ||
    [[ ! -e "${ENV_FILENAME}" ]] ||
    [[ "${ENV_FILENAME}" =~ .env.example ]]; then
    echo -e "Environment file does not exist or it's the wrong one."
    exit 1
  fi

  # You can replace with any number of environment variables that need to be
  # verified
  if [[ -z "${PROJECT_TAG}" ]]; then
    echo -e "'PROJECT_TAG' environment variable and similar, is missing"
  fi
}

function _has-internet {
  ping -q -c 1 -W 1 8.8.8.8 >/dev/null
}

function _h {
  # First and last newlines are required in order to pretty print help text
  read -r -d '' var <<'eof'
What does function do. Usage:
  ./run.sh ping-app [OPTIONS]

Options:
  --verbose/-v. Description should be capitalized and end in a period.
  --timeout/-t. Super long
                description's subsequent lines should start at same column as
                first line.

Examples:
  ./run.sh ping-app
eof

  local output
  IFS=''
  while read -r line; do
    next=": \"${line}\" "
    output="${output}\n${next}"
  done <<<"$(printf "%s" "$var")"

  echo -e "${output}\n"

  if command -v xclip &>/dev/null; then
    echo -e "${output}" | xclip -selection c
  fi
}

full_line_len=$(tput cols)

function _echo {
  local text="${*}"
  local equal='*'

  local len="${#text}"
  len=$((full_line_len - len))
  local half=$((len / 2 - 1))

  local line=''

  for _ in $(seq $half); do
    line="${line}${equal}"
  done

  echo -e "\n${text}  ${line}${line}\n"
}

# -----------------------------------------------------------------------------
# END HELPER FUNCTIONS
# -----------------------------------------------------------------------------

function build {
  : "Build the project"
  echo "build task not implemented"
}

function help {
  : "List available tasks."

  mapfile -t names < <(compgen -A function | grep -v '^_')

  local len=0
  declare -A names_map=()

  for name in "${names[@]}"; do
    _len="${#name}"
    names_map["$name"]="${_len}"
    if [[ "${_len}" -gt "${len}" ]]; then len=${_len}; fi
  done

  len=$((len + 10))

  for name in "${names[@]}"; do
    local spaces=""
    _len="${names_map[$name]}"
    _len=$((len - _len))

    for _ in $(seq "${_len}"); do
      spaces="${spaces}-"
      ((++t))
    done

    mapfile -t doc1 < <(
      type "$name" |
        sed -nEe "s/^[[:space:]]*: ?\"(.*)\";/\1/p"

    )

    if [[ -n "${doc1[*]}" ]]; then
      for _doc in "${doc1[@]}"; do
        echo -e "${name} ${spaces} ${_doc}"
      done
    else
      echo "${name} ${spaces} *************"
    fi

    echo
  done
}

TIMEFORMAT=$'\n\nTask completed in %3lR\n'
time "${@:-help}"
