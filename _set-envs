#!/usr/bin/env bash

____setenvs_help() {
  read -r -d '' var <<'eof'
Set environment variables from a file into the shell. Usage:
  _setenvs env_file_name [OPTIONS]

Options:
  --help/-h
       Print this help text and exit.

  --level/-l level
       How many levels, in integer, deep should we search parent directories if environment file can not be found in the
       current directory.
       Maximum levels is 5

Examples:
  _setenvs
  _setenvs --help
  _setenvs --level 5
eof

  echo -e "${var}"
}

_setenvs() {
  # TODO: can I write a project such as
  # https://github.com/andrewmclagan/react-env so users can set environment
  # vars based on shell type on different OSes - linux, Mac, windows?
  : "___help___ ____setenvs_help"

  local _path
  local _level=2
  local _path_to_use

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local parsed

  if ! parsed="$(
    getopt \
      --longoptions=level:,help \
      --options=l:,h \
      --name "$0" \
      -- "$@"
  )"; then
    exit 1
  fi

  # Provides proper quoting
  eval set -- "$parsed"

  while true; do
    case "$1" in
    --help | -h)
      ____setenvs_help
      return
      ;;

    --level | -l)
      _level=$2
      shift 2
      ;;

    --)
      shift
      break
      ;;

    *)
      echo "Unknown option ${1}."
      ____setenvs_help
      return
      ;;
    esac
  done

  # handle non-option arguments
  if [[ $# -ne 1 ]]; then
    echo "Non optional argument environment file to set is required."
    ____setenvs_help
    return
  fi

  if [[ "$_level" -gt 5 ]]; then
    echo -e "Maximum level of 5 allowed. Got '$_level'\n"
    ____setenvs_help
    return
  fi

  _path=$1
  _path_to_use=$1
  # --------------------------------------------------------------------------
  # END PARSE ARGUMENTS
  # --------------------------------------------------------------------------

  _path_to_use="$(
    _compute_path_to_use \
      "$_path_to_use" "$_level"
  )"

  if [[ -z "$_path_to_use" ]]; then
    echo "$_path does not exist."
    return
  fi

  local _output
  _output="$_path_to_use--$(date +'%s')--temp"

  local _p_env="${DOTFILE_PARENT_PATH}/dotfiles/scripts/p-env"

  "$_p_env" "$_path_to_use" \
    --output "${_output}"

  if [[ -s "$_output" ]]; then
    set -o allexport
    # shellcheck source=/dev/null
    . "${_output}"
    set +o allexport

    rm -rf "${_output}"
  else
    echo "Environment vairables can not be written to shell. File \"$_output\" does not exist."
  fi
}

_compute_path_to_use() {
  local _path_to_use=$1
  local _level=$2
  local _exists

  for _l in $(seq "$_level"); do
    if [[ -e "$_path_to_use" ]]; then
      _exists=1
      break
    fi

    _path_to_use="../$_path_to_use"
  done

  if [[ -z "$_exists" ]]; then
    return
  fi

  echo "$_path_to_use"
}

alias se='_setenvs'
alias e='_setenvs'
