nnoremap <Space> <Nop>
let mapleader=" "
let maplocalleader=","

" Disable bells
set visualbell
" set noerrorbells

" set showmode
set idearefactormode=keep
set ideajoin

set incsearch    " Incremental search, search as you type
set ignorecase   " Make searching case insensitive
set smartcase    " ... unless the query has capital letters
set gdefault     " Use 'g' flag by default with :s/foo/bar/.
set hlsearch

" LINE NUMBERING
set number " always show line numbers
nnoremap <leader>sn :set number<CR>
" set relative numbering as default
set relativenumber

" format paragraphs/lines to 80 chars
nnoremap <Leader>pp gqap
xnoremap <Leader>pp gqa
" Save file
nnoremap <Leader>ww :w<CR>
nnoremap <Leader>wa :wa<CR>
nnoremap <Leader>wq :wq<cr>
nnoremap <Leader>w! :w!<cr>

" Quit vim
nnoremap <Leader>qq :q<cr>
nnoremap <Leader>qf :q!<cr>
nnoremap <Leader>bd :q!<cr>
map <Leader>qA <Action>(Exit)
map <Leader>bA <Action>(CloseAllEditorsButActive)
map <leader>ta <Action>(CloseAllEditors)
map <Leader>rs <Action>(RestartIDE)

" better code indentations in visual mode.
vnoremap < <gv
vnoremap > >gv
" yank / Copy and paste from system clipboard (Might require xclip install)
nmap "+yy 0"+yg_
vmap <Leader>Y "+y
vmap <Leader>x "+x
nmap <Leader>x "+x
nmap <Leader>P "+P
vmap <Leader>P "+P
" Yank all
nnoremap <Leader>y+ :%y<bar>:let @+=@"<CR>
nnoremap <Leader>YY :%y<bar>:let @+=@"<CR>
nnoremap <Leader>ya :%y<bar>:let @a=@"<CR>
nnoremap <Leader>yz :%y<bar>:let @z=@"<CR>
nnoremap ,yy vgny<bar>:let @+=@"<CR>

" TABS
" Move between windows in a tab
nmap <tab> <C-w>w
nnoremap <c-h> <C-w>h

nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>ts :tab split<cr>
nnoremap ,tc :tabclose<CR>
nnoremap ,td :execute 'bwipeout! '.join(tabpagebuflist())<cr>
nnoremap ,vn :vnew<cr>
nnoremap ,sn :new<cr>

" edit init.vim
nnoremap ,ec :tab split<cr>:e ~/.ideavimrc<CR>
" source init.vim
nnoremap ,sc :so ~/.ideavimrc<CR>
" source lua file
nnoremap ,ss :source %<CR>:so ~/.ideavimrc<CR>

" COPY FILE PATH
" yank relative File path
map ,yr <Action>(CopyContentRootPath)
" yank file name / not path
map ,yn <Action>(CopyFileName)
" yank file parent directory
nmap ,yd :let @+=expand("%:p:h")<CR>
" yank absolute File path
map ,yf <Action>(CopyAbsolutePath)
" copy relative path
nmap ,cr :let @"=expand("%")<CR>
" copy absolute path
nmap ,cf :let @"=expand("%:p")<CR>
nmap ,cn :let @"=expand("%:t")<CR>
" Yank current git branch
nnoremap ,yg :execute "let @+=FugitiveHead()"<CR>
" Yank current working directory
nnoremap ywd :let @+=trim(execute(":pwd"))<CR>
nnoremap ,yw :let @+=execute(":pwd")<CR>

vnoremap <leader>*
  \ :let @+=

xmap * "sy:let @/=@s<CR>gn

"find and replace in file
" press * {shift 8) to search for word under cursor and key combo below to
" replace in entire file
nnoremap <leader>rr :%s///g<left><left>
nnoremap <leader>rc :%s///gc<left><left><left>
" same as above but only visually selected range
xnoremap <leader>rr :%s///g<left><left>
xnoremap <leader>rc :%s///gc<left><left><left>
" Search for the strings using `fzf`, press <tab> to select multiple (<s-tab> to deselect) and <cr> to populate QuickFix list
" After searching for strings, press this mapping to do a project wide find and
" replace. It's similar to <leader>r except this one applies to all matches
" across all files instead of just the current file.
nnoremap <Leader>RR :cfdo %s///g \| update<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
" The same as above except it works with a visual selection.
xmap <Leader>RR :cfdo %s/<C-r>s//g \| update<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" Remove contents of current file
" https://stackoverflow.com/a/7069592
nnoremap d= :e! %<cr><bar>:%delete_<cr>:w!<cr>
" Remove contents of current file and enter insert mode
nnoremap c= :e! %<cr><bar>:%delete_<cr>i

" Dump vim register into a buffer in vertical split.
nnoremap <leader>re :reg<CR>
nnoremap yoh :noh<cr>

" map <leader>z <Action>(ToggleDistractionFreeMode)
map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
map <leader>fc <Action>(ReformatCode)
map <leader>N <Action>(ReformatCode)
map <leader>tt <Action>(ActivateTerminalToolWindow)
map <leader>fl <Action>(Find)
map <leader>se  <Action>(SearchEverywhere)
map <C-p>  <Action>(GotoFile)
map <Leader>/  <Action>(FindInPath)
map <Leader>tt  <Action>(ActivateTerminalToolWindow)
map <Leader>TT  <Action>(ToggleZenMode)<CR>:set number<CR>

map <Leader>hh  <Action>(HideActiveWindow)
" map <C-p> <Action>(ActivateProjectToolWindow)
map <C-0> <Action>(WelcomeScreen.OpenProject)
map <leader>rn <Action>(RenameElement)
map <leader>bu <Action>(FindUsages)
map ,o <Action>(OptimizeImports)
map <leader>fb <Action>(RecentFiles)
map ,dd <Action>(ActivateDebugToolWindow)
map <leader>du <Action>(ActivateDatabaseToolWindow)
map <C-w>T <Action>(MoveEditorToOppositeTabGroup)
map ,aw <Action>(ShowIntentionActions)
map <leader>sp <Action>(SelectInProjectView)
map ,rm <Action>(Delete)
map <leader>gg <Action>(ActivateVersionControlToolWindow)
" map <leader>gd <Action>(CompareTwoFiles)
map <leader>gd <Action>(Compare.SameVersion)
map <leader>gb <Action>(Annotate)

""" Plugin --------------------------------
Plug 'easymotion/vim-easymotion'
map <leader>J <Plug>(easymotion-s)
map <leader>j <Plug>(easymotion-f)

set NERDTree
set commentary
set surround

" Plug 'tpope/vim-unimpaired'
