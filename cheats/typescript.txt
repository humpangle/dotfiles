tsc --noEmit --project .
  typecheck project.

tsc --noEmit fileName


-------------------------------------------------------------------------------
                  recipes
-------------------------------------------------------------------------------
[tsserver 5055] [E] Cannot write file because it would overwrite input file.

// in tsconfg.json
{
  "compilerOptions": {
    "outDir": "myOutDir"  // <--- Don't forget this
  }
}

compilerOptions.skipLibCheck = true
  skips typecheck of *.d.ts files which can speed up compilation since only
  the codes you have written against those types which checked. But this will
  degrade the validity of type checks if different packages supply mismatched
  types for same entity. E.g. packageA declares Buffer type and packageB does
  too, but the declarations are incompatible.
https://stackoverflow.com/questions/52311779/usage-of-the-typescript-compiler-argument-skiplibcheck
----

1. using enum values as type
enum Something {
  A  = 'a',
  B = 'b'
}

type FromEnum = {[k in Something]: JSX.Element }

const fromEnum = {
  [Something.A]: <head/>,
  [Something.B]: <Tail/>
}

2. using enum keys (number) as type
type FromEnum = {[k in keyof typeof Something]: JSX.Element }
const fromEnum: FromEnum = {
  0: <head/>,
  1: <Tail/>
}

3. using interface keys as type

interface Something {
  a: string;
  b: string;
}

type FromSomething {[k in keyof Something]: Something[k]}
const fromSomething: FromSomething =  {
  a: 'you',
  b: 'me'
}

4. using object keys
const object = {a: 1, b: 2, c: 3}
type FromObject = {[k in keyof typeof object]: object[k]}
----------------


typescript Type error: Duplicate identifier 'YYYType'.  TS2300

resolution
====
1. inside your tsconfig.json file, under compilerOptions, add key "types": [
  ..."the types from your package.json that you need in this project"
]

if above not possible, say, because you have too many types and you'll have to
explicitly list them all, then in package.json:

"resolution": {
  "@types/react": "0.16.5"
}

The reason is that more than one package requires the package type as
dependency and causing the conflict. By pinning via the package.json resolution
field, we ensure only one copy in our node_modules folder and therefore no
