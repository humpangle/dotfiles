<ul id='my-list'>
  <li>1</li>
  <li>2</li>
  <li>3</li>
</ul>

const list = document.getElementById('my-list')

1. list.childNodes === 7
because there are 4 text nodes in addition to the 3 li nodes
a. 1 between opening ul and li1
b. 1 between li1 and li2
c. 1 between li2 and li3
d. 1 between li3 and closing ul

2. list.children === 3
selects on nodes that are not text nodes

list.firstChild
list.firstElementChild
list.lastChild
list.lastElementChild
list.nextSibling
list.nextElementSibling
list.nextSibling
list.nextElementSibiling
list.previousSibling
list.previousElementSibling

parentElement.contains(childElement)

list.parentElement.preprend = list.insertAdjacentHTML('beforebegin', htmlString)

list.preprend === list.insertAdjacentHTML('afterbegin', htmlString)
list.append === list.insertAdjacentHTML('beforeend', htmlString)
list.parentElement.append === list.insertAdjacentHTML('afterend', htmlString)


differences between node.append vs node.appendChild
===
node.append(string/DOMString | node)
  no return value
  appends several nodes/strings

node.appendChild(nodeOnly)
  returns appended node
  appends only one node
  does not append DOMString


parentElement vs parentNode
=====
parentElement = must be an html element e.g. ul > li, li.parentElement === ul

parentNode does not have to be a node e.g html > body,
  html.parentNode === HTMLDocument
  html.parentElement === null;

-------------------------------------------------------------------------------
            ATTRIBUTES
-------------------------------------------------------------------------------
el.setAttribute(name, value)
el.getAttribute(name)
el.removeAttribute(name)

const string = el.textContent // get text content
el.textContent = string // set text content


-------------------------------------------------------------------------------
            ITERATIONS
-------------------------------------------------------------------------------
(el.childNodes /** NodeList type */).forEach(node => node)

[].forEach.call(( el.children /** HTMLCollection type */ ), node => node)


-------------------------------------------------------------------------------
            CSS STYLES
-------------------------------------------------------------------------------
const styles = el.style.cssText; // 'color:red;font-size:10'

el.style.cssText = `color:red;` // set many styles

el.style.fontWeight = "bold"; // set individual style



-------------------------------------------------------------------------------
            EVENTS
-------------------------------------------------------------------------------

const eventMap = {
  // Clipboard Events
  copy: {
    EventType: 'ClipboardEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  cut: {
    EventType: 'ClipboardEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  paste: {
    EventType: 'ClipboardEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },

  // Composition Events
  compositionEnd: {
    EventType: 'CompositionEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  compositionStart: {
    EventType: 'CompositionEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  compositionUpdate: {
    EventType: 'CompositionEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },

  // Keyboard Events
  keyDown: {
    EventType: 'KeyboardEvent',
    defaultInit: {bubbles: true, cancelable: true, charCode: 0},
  },
  keyPress: {
    EventType: 'KeyboardEvent',
    defaultInit: {bubbles: true, cancelable: true, charCode: 0},
  },
  keyUp: {
    EventType: 'KeyboardEvent',
    defaultInit: {bubbles: true, cancelable: true, charCode: 0},
  },

  // Focus Events
  focus: {
    EventType: 'FocusEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  blur: {
    EventType: 'FocusEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  focusIn: {
    EventType: 'FocusEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  focusOut: {
    EventType: 'FocusEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },

  // Form Events
  change: {
    EventType: 'Event',
    defaultInit: {bubbles: true, cancelable: false},
  },
  input: {
    EventType: 'InputEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  invalid: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: true},
  },
  submit: {
    EventType: 'Event',
    defaultInit: {bubbles: true, cancelable: true},
  },
  reset: {
    EventType: 'Event',
    defaultInit: {bubbles: true, cancelable: true},
  },
  // Mouse Events
  click: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true, button: 0},
  },
  contextMenu: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  dblClick: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  drag: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  dragEnd: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  dragEnter: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  dragExit: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  dragLeave: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  dragOver: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  dragStart: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  drop: {
    EventType: 'DragEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  mouseDown: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  mouseEnter: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  mouseLeave: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  mouseMove: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  mouseOut: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  mouseOver: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  mouseUp: {
    EventType: 'MouseEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  // Selection Events
  select: {
    EventType: 'Event',
    defaultInit: {bubbles: true, cancelable: false},
  },
  // Touch Events
  touchCancel: {
    EventType: 'TouchEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  touchEnd: {
    EventType: 'TouchEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  touchMove: {
    EventType: 'TouchEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  touchStart: {
    EventType: 'TouchEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  // UI Events
  scroll: {
    EventType: 'UIEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  // Wheel Events
  wheel: {
    EventType: 'WheelEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  // Media Events
  abort: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  canPlay: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  canPlayThrough: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  durationChange: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  emptied: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  encrypted: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  ended: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  // error: {
  //   EventType: Event,
  //   defaultInit: {bubbles: false, cancelable: false},
  // },
  loadedData: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  loadedMetadata: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  loadStart: {
    EventType: 'ProgressEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  pause: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  play: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  playing: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  progress: {
    EventType: 'ProgressEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  rateChange: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  seeked: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  seeking: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  stalled: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  suspend: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  timeUpdate: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  volumeChange: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  waiting: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  // Image Events
  load: {
    EventType: 'UIEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  error: {
    EventType: 'Event',
    defaultInit: {bubbles: false, cancelable: false},
  },
  // Animation Events
  animationStart: {
    EventType: 'AnimationEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  animationEnd: {
    EventType: 'AnimationEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  animationIteration: {
    EventType: 'AnimationEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  // Transition Events
  transitionEnd: {
    EventType: 'TransitionEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  // pointer events
  pointerOver: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  pointerEnter: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  pointerDown: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  pointerMove: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  pointerUp: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  pointerCancel: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: true, cancelable: false},
  },
  pointerOut: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: true, cancelable: true},
  },
  pointerLeave: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  gotPointerCapture: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
  lostPointerCapture: {
    EventType: 'PointerEvent',
    defaultInit: {bubbles: false, cancelable: false},
  },
}


Manually trigger event;
=============================
const domInput = document.createElement('input');
1.
domInput.onchange = (evt) => {}
  to trigger change event:
domInput.onchange(); // because we attached event via element.onchange

2.
domInput.addEventListerner('change', (evt) => {}, false);

domInput.dispatchEvent(new Event('change', { 'bubbles': true, cancellable: false })); // only works in modern browsers (not IE)



Difference between “change” and “input” event for an `input` element
====================================================================
oninput:
    any change made in the text content --> as you type
onchange:
    If it is an <input />/ textarea: change + lose focus
    If it is a <select>: change option
