#!/usr/bin/env bash
# shellcheck disable=2032

if ! command -v docker &>/dev/null; then
  return
fi

_DOCKER_GLOBAL_LOG_DIR_="$HOME/.docker-ebnis-logs"
if [ -n "$_DOCKER_LOCAL_LOG_DIR_" ]; then
  _DOCKER_GLOBAL_LOG_DIR_="$_DOCKER_LOCAL_LOG_DIR_"
fi

mkdir -p "$_DOCKER_GLOBAL_LOG_DIR_"
alias dld='$_DOCKER_GLOBAL_LOG_DIR_'
alias dldc='copy $_DOCKER_GLOBAL_LOG_DIR_'

declare -A _alias_map_docker=()

if [ -n "$_EBNIS_DOCKER_BIN" ]; then
  docker() {
    : "__EBNIS_COMPOSE_CONFIG_FILENAME__='file1 file2' docker compose up"
    : "__EBNIS_COMPOSE_CONFIG_FILENAME__='file1' docker compose up"
    : "docker compose up"

    if [ -n "$__EBNIS_ENABLE_DOCKER_NETWORKING__" ]; then
      # aws vpn client disables port forwarding in docker networking - this command re-enables it
      sudo sysctl net.ipv4.ip_forward=1 &>/dev/null
    fi

    if [ "$1" = 'compose' ]; then
      local args_after_compose_=("${@:2}")
      local args_=()

      if [ -n "$__EBNIS_COMPOSE_CONFIG_FILENAME__" ]; then
        local compose_files_=()
        read -ra compose_files_ <<<"$__EBNIS_COMPOSE_CONFIG_FILENAME__"

        for compose_file_ in "${compose_files_[@]}"; do
          args_=("${args_[@]}" "--file")
          args_=("${args_[@]}" "$compose_file_")
        done
      fi

      args_=("${args_[@]}" "${args_after_compose_[@]}")

      if [ "$2" = "logs" ]; then
        local log_file_=""
        log_file_="$_DOCKER_GLOBAL_LOG_DIR_/$(date +'%FT%H-%M-%S').log"
        local cmd_="$_EBNIS_DOCKER_BIN compose ${args_[*]}"

        echo -e "$PWD\n$cmd_\n" >"$log_file_"
        echo -e "\n$cmd_ \nLog file =>\n$log_file_\n"

        "$_EBNIS_DOCKER_BIN" compose "${args_[@]}" | tee -a "$log_file_"
        return
      fi

      "$_EBNIS_DOCKER_BIN" compose "${args_[@]}"

      return
    fi

    "$_EBNIS_DOCKER_BIN" "$@"
  }

  export -f docker
fi

function docker-compose {
  docker compose "${@}"
}

export -f docker-compose

_alias_map_docker["d"]='docker'
# docker remove all containers
# shellcheck disable=2016
_alias_map_docker["drac"]='docker rm $(docker ps -a -q)'
# shellcheck disable=2016
_alias_map_docker["dracf"]='drac --force'
_alias_map_docker["drac__description"]='docker rm all containers force'
_alias_map_docker["drim"]='docker rmi'
_alias_map_docker["dim"]='docker images'
_alias_map_docker["dps"]='docker ps'
_alias_map_docker["dpsa"]='docker ps -a'
_alias_map_docker["dc"]='docker compose'
_alias_map_docker["dcp"]='docker compose'
_alias_map_docker["dce"]='docker compose exec'
_alias_map_docker["de"]='docker exec -it'
_alias_map_docker["dcu"]='docker compose up'
_alias_map_docker["dcub"]='docker compose up --build'
_alias_map_docker["dcud"]='docker compose up -d'
_alias_map_docker["dcb"]='docker compose build'
_alias_map_docker["db"]='docker build -t'
_alias_map_docker["dcl"]='docker compose logs'
_alias_map_docker["dclf"]='docker compose logs -f'
_alias_map_docker["dck"]='docker compose kill'
_alias_map_docker["dcd"]='docker compose down'
_alias_map_docker["dcdv"]='docker compose kill && docker compose down -v'
# shellcheck disable=2016
_alias_map_docker["dvra"]='docker volume rm $(docker volume ls -q)'
_alias_map_docker["dv"]='docker volume'
_alias_map_docker["dvls"]='docker volume ls'
_alias_map_docker["dvlsq"]='docker volume ls -q'
_alias_map_docker["ds"]='sudo service docker start'
_alias_map_docker["dn"]='docker network'
_alias_map_docker["dnls"]='docker network ls'
_alias_map_docker["dcps"]='_dcps'
_alias_map_docker["dcpsa"]='_dcps -a'
_alias_map_docker["dcpsA"]='docker compose ps'
_alias_map_docker["dcc"]='docker compose config'
_alias_map_docker["drmlogs__description"]='docker rm logs containers..'
_alias_map_docker["d-dangling"]='dim -qf dangling=true | xargs docker rmi -f 2>/dev/null'
_alias_map_docker["ddangling"]='d-dangling'
_alias_map_docker["dcrml"]='drmlogs -c'
_alias_map_docker["dclrm"]='drmlogs -c'
_alias_map_docker["dtruncatel"]='drmlogs'
_alias_map_docker["dcrm"]='docker compose rm'

_dcps() {
  docker compose ps \
    --format "table {{.Name}}\t{{.Service}}\t{{.Status}}\t{{.Ports}}" "$@" |
    awk 'NR==1 { h=$0; print; for (i=1; i<=length(h); i++) printf "-"; print ""; next }1'
}

# docker compose up --daemon and logs --follow
_dcudlf() {
  docker compose up -d "$@"
  docker compose logs -f "$@"
}

_alias_map_docker["dcudlf"]='_dcudlf'
_alias_map_docker["dcudfl"]='_dcudlf'
_alias_map_docker["dcufl"]='_dcudlf'
_alias_map_docker["dculf"]='_dcudlf'
_alias_map_docker["dcudlf__description"]='docker up daemon and logs'

# docker compose restart and logs --follow
dcrsf() {
  docker compose restart "$@"
  docker compose logs -f "$@"
}
_alias_map_docker["dcrs"]='dcrsf'
_alias_map_docker["dcrs__description"]='docker compose restart then logs'

dimgf() {
  if [ -n "$1" ]; then
    docker images |
      grep -P "$1"
  else
    printf 'false'
  fi
}

drimgf() {
  docker images |
    grep -P "$1" |
    awk '{print $3}' |
    xargs "$_EBNIS_DOCKER_BIN" rmi
}

_alias_map_docker["dimg"]='dimgf'
_alias_map_docker["drimg"]='drimgf'
_alias_map_docker["dimg___description"]='docker images grep'

_docker_compose_build_no_cache() {
  docker compose build "${@}" --no-cache
}

_alias_map_docker["dcbn"]='_docker_compose_build_no_cache'
_alias_map_docker["dcbn___description"]='docker build no cache'

_docker_image_repo_tag_merge_func() {
  local _pattern=""

  for arg in "$@"; do
    _pattern+="($arg).*"
  done

  local _result
  _result="$(
    docker image ls |
      awk -v p="$_pattern" '
            BEGIN{
                OFS=":";
            }
            match($0, p) {print $1,$2}
          '
  )"

  if [[ -n "$_result" ]]; then
    echo -n "$_result" |
      xclip -selection c

    echo "$_result"
  fi
}

alias dimrt=_docker_image_repo_tag_merge_func
alias dimrt__description='_docker_image_repo_tag_merge_func dimm docker image repo tag merge/join'

# docker compose kill and up
dckr() {
  local service_="$1"
  local args_=("${@:2}")

  docker compose kill "$service_"
  docker compose up "${args_[@]}" "$service_"
}
alias dckr__description='dck && dcud docker compose kill && docker compose up --detached'

_alias_map_complete _alias_map_docker
