{
  "Use Controller": {
    "prefix": "usecontroller",
    "body": ["use App\\Http\\Controllers\\\\${1:ControllerName};$0"],
    "description": "Use Controller"
  },
  "Use Model": {
    "prefix": "usemodel",
    "body": ["use App\\Models\\\\${1:ModelName};$0"],
    "description": "Use Model"
  },
  "Route::controller": {
    "prefix": "Route::controller",
    "body": [
      "Route::${1:verb}('${2:path}', [${3:NameController}::class, '${method}']);$0"
    ],
    "description": "Use Controller"
  },
  "Route::prefix": {
    "prefix": "Route::prefix",
    "body": [
      "Route::prefix('${1:path}')->group(function () {",
      "   ${0://code}",
      "});"
    ],
    "description": ""
  },
  "Route::resource": {
    "prefix": "Route::resource",
    "body": ["Route::resource('${1:path}', ${3:NameController}::class);$0"],
    "description": ""
  },
  "Save model controller": {
    "prefix": "savemodelcontroller",
    "body": [
      "\\$request->validate([",
      "   '${2:field}' => '${3:required}',$0",
      "]);",
      "return ${1:Model}::create(\\$request->all());"
    ],
    "description": "Store model controller"
  },
  "Store model controller": {
    "prefix": "storemodelcontroller",
    "body": [
      "\\$request->validate([",
      "   '${2:field}' => '${3:required}',$0",
      "]);",
      "return ${1:Model}::create(\\$request->all());"
    ],
    "description": "Store model controller"
  },
  "Update model in controller": {
    "prefix": "updatemodelcontroller",
    "body": [
      "// \\$${1:modelInstance}->field = \\$request->input('field');",
      "\\$${1:modelInstance}->update(\\$request->all());",
      "return \\$${1:modelInstance};$0"
    ],
    "description": ""
  },
  "Use carbon": {
    "prefix": "usecarbon",
    "body": ["use Illuminate\\Support\\Carbon;"],
    "description": ""
  },
  "Model Class protected members": {
    "prefix": "modelprotected",
    "body": [
      "protected \\$fillable = [",
      "   'name',",
      "   // JSON",
      "   'options->enabled',",
      "];",
      "//(",
      "",
      "// attributes that aren't mass assignable",
      "protected \\$guarded = [];",
      "protected \\$dispatchesEvents = [",
      "   // 'saved' => UserSaved::class,",
      "   // 'deleted' => UserDeleted::class,",
      "];",
      "protected \\$table = 'table_name';",
      "protected \\$primaryKey = 'id_field';",
      "// data type of ID",
      "protected \\$keyType = 'string';",
      "protected \\$dateFormat = 'U';",
      "protected \\$connection = 'sqlite';",
      "// default values for attributes",
      "protected \\$attributes = [",
      "   'delayed' => false,",
      "];",
      "// The attributes that should be hidden for arrays/JSON representation",
      "protected \\$hidden = [",
      "   'password',",
      "];",
      "// The attributes that should be visible in arrays/JSON representation",
      "protected \\$visible = [",
      "   'first_name',",
      "];",
      "// The attributes that should be cast after retrieval from database",
      "// 'created_at'/'updated_at'/'deleted_at' are cast by default",
      "// https://laravel.com/docs/8.x/eloquent-mutators#attribute-casting",
      "protected \\$cast = [",
      "   'joined_at' => 'datetime:Y-m-d H:00',",
      "   'birthday' => 'date:Y-m-d',",
      "];",
      "// use other names but 'created_at' and 'updated_at' timestamp fields",
      "const CREATED_AT = 'creation_date';",
      "const UPDATED_AT = 'updated_date';",
      "//)"
    ],
    "description": "Model Class protected members"
  },
  "Use RefreshDatabase": {
    "prefix": "userefreshdatabase",
    "body": [
      "use RefreshDatabase;",
      "//use Illuminate\\Foundation\\Testing\\RefreshDatabase;"
    ],
    "description": "Use RefreshDatabase"
  },
  "class …": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName} ${2:extends ${3:AnotherClass}} ${4:implements ${5:Interface}}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Class definition"
  },
  "PHPDoc class …": {
    "prefix": "doc_class",
    "body": [
      "/**",
      " * ${6:undocumented class}",
      " */",
      "class ${1:ClassName} ${2:extends ${3:AnotherClass}} ${4:implements ${5:Interface}}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Documented Class Declaration"
  },
  "function __construct": {
    "prefix": "con",
    "body": [
      "${1:public} function __construct(${2:${3:Type} \\$${4:var}${5: = ${6:null}}}) {",
      "\t\\$this->${4:var} = \\$${4:var};$0",
      "}"
    ]
  },
  "PHPDoc property": {
    "prefix": "doc_v",
    "body": [
      "/** @var ${1:Type} \\$${2:var} ${3:description} */",
      "${4:protected} \\$${2:var}${5: = ${6:null}};$0"
    ],
    "description": "Documented Class Variable"
  },
  "PHPDoc function …": {
    "prefix": "doc_f",
    "body": [
      "/**",
      " * ${1:undocumented function summary}",
      " *",
      " * ${2:Undocumented function long description}",
      " *",
      "${3: * @param ${4:Type} \\$${5:var} ${6:Description}}",
      "${7: * @return ${8:type}}",
      "${9: * @throws ${10:conditon}}",
      " **/",
      "${11:public }function ${12:FunctionName}(${13:${14:${4:Type} }\\$${5:var}${15: = ${16:null}}})",
      "{",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Documented function"
  },
  "PHPDoc param …": {
    "prefix": "param",
    "body": ["* @param ${1:Type} ${2:var} ${3:Description}$0"],
    "description": "Paramater documentation"
  },
  "public function": {
    "prefix": ["funpublic", "publicfunc"],
    "body": [
      "public ${1:static} function ${2:functionName}(${3:type} ${4:\\$params})",
      "{",
      "  $0",
      "}"
    ],
    "description": "Function"
  },
  "private function": {
    "prefix": ["funprivate", "privatefunc"],
    "body": [
      "private ${1:static} function ${2:functionName}(\\$${3:params})",
      "{",
      "  ${0:# code...}",
      "}"
    ],
    "description": "Function"
  },
  "trait …": {
    "prefix": "trait",
    "body": [
      "/**",
      " * $1",
      " */",
      "trait ${2:TraitName}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Trait"
  },
  "define(…, …)": {
    "prefix": "def",
    "body": ["define('$1', ${2:'$3'});", "$0"],
    "description": "Definition"
  },
  "do … while …": {
    "prefix": "do",
    "body": [
      "do {",
      "\t${0:# code...}",
      "} while (${1:\\$${2:a} <= ${3:10}});"
    ],
    "description": "Do-While loop"
  },
  "while …": {
    "prefix": "while",
    "body": ["while (${1:\\$${2:a} <= ${3:10}}) {", "\t${0:# code...}", "}"],
    "description": "While-loop"
  },
  "$… = ( … ) ? … : …": {
    "prefix": "if?",
    "body": "\\$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b} ;",
    "description": "Ternary conditional assignment"
  },
  "else …": {
    "prefix": "else",
    "body": ["else {", "\t${0:# code...}", "}"],
    "description": "Else block"
  },
  "elseif …": {
    "prefix": "elseif",
    "body": ["elseif (${1:condition}) {", "\t${0:# code...}", "}"],
    "description": "Elseif block"
  },
  "for …": {
    "prefix": "for",
    "body": [
      "for (\\$${1:i}=${2:0}; \\$${1:i} < $3; \\$${1:i}++) { ",
      "\t${0:# code...}",
      "}"
    ],
    "description": "For-loop"
  },
  "$… = array (…)": {
    "prefix": "array",
    "body": "\\$${1:arrayName} = array('$2' => $3${4:,} $0);",
    "description": "Array initializer"
  },
  "$… = […]": {
    "prefix": "shorray",
    "body": "\\$${1:arrayName} = ['$2' => $3${4:,} $0];",
    "description": "Array initializer"
  },
  "… => …": {
    "prefix": "keyval",
    "body": "'$1' => $2${3:,} $0",
    "description": "Key-Value initializer"
  },
  "case …": {
    "prefix": "case",
    "body": ["case '${1:value}':", "\t${0:# code...}", "\tbreak;"],
    "description": "Case Block"
  },
  "$this->…": {
    "prefix": "this",
    "body": "\\$this->$0;",
    "description": "$this->..."
  },
  "echo $this->…": {
    "prefix": "ethis",
    "body": "echo \\$this->$0;",
    "description": "Echo this"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": [
      "throw new $1Exception(${2:\"${3:Error Processing Request}\"}${4:, ${5:1}});",
      "$0"
    ],
    "description": "Throw exception"
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["#region"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["#endregion"],
    "description": "Folding Region End"
  },
  "Log::info": {
    "prefix": "loginfo",
    "body": [
      "Log::info([",
      "  '__LINE__' => __LINE__,",
      "  '__FILE__' => __FILE__,",
      "  '$1' => $1,",
      "$0",
      "]);"
    ],
    "description": "Log::info"
  },
  "php tag": {
    "prefix": ["php_tag", "tag_php"],
    "body": ["<?php", "declare(strict_types=1);", "$0", "?>"],
    "description": ["PHP Tag"]
  },
  "html comment": {
    "prefix": ["html_comment", "comment_html"],
    "body": ["<!-- $0 -->"],
    "description": ["HTML Comment"]
  },
  "wordpress plugin": {
    "prefix": ["wordpress_plugin_template", "plugin_wordpress_snippet"],
    "body": [
      "<?php",
      "/**",
      "* Plugin Name: ${1:My Plugin}",
      "* Description: ${2:Description}",
      "* Plugin URI: https://",
      "* Author: ${3:Author Name}",
      "* Author URI: https://",
      "* Version: ${4:0.0.0}",
      "*",
      "* Text Domain: ${5:my-plugin-unique-id}",
      "*",
      "* @package ${6:my-plugin}",
      "* @category Core",
      "*/",
      "",
      "if ( ! defined( 'ABSPATH' ) ) {",
      "  exit; // Exit if accessed directly.",
      "}",
      "$0",
      "",
      "?>"
    ],
    "description": ["Wordpress plugin template"]
  },
  "phpunit test": {
    "prefix": ["phpunit_test", "test_phpunit"],
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "use PHPUnit\\Framework\\TestCase;",
      "use ${1:Namespace\\\\}${2:ClassName};",
      "",
      "final class ${2:ClassName}Test extends TestCase",
      "{",
      "      public function testCanBeUsedAsString(): void",
      "      {",
      "              \\$this->assertEquals(",
      "                      ${0:\"user@example.com\"},",
      "                      ${2:ClassName}::${3:fromString}(${4:\"val\"})",
      "              );",
      "      }",
      "}"
    ],
    "description": ["PHPUnit test"]
  },
  "PhpCsFixer config": {
    "prefix": ["phpcsfixerconfig", "configphpcsfixer"],
    "body": [
      "<?php",
      "",
      "// .php-cs-fixer.php",
      "use PhpCsFixer\\Config;",
      "use PhpCsFixer\\Finder;",
      "",
      "\\$rules = [",
      "  '@PSR2' => true,",
      "  'array_syntax' => [",
      "    'syntax' => 'short',",
      "  ],",
      "  'array_indentation' => true,",
      "  'no_trailing_comma_in_singleline_array' => true,",
      "  'no_whitespace_before_comma_in_array' => true,",
      "  'trim_array_spaces' => true,",
      "  'whitespace_after_comma_in_array' => true,",
      "  'no_superfluous_elseif' => true,",
      "  'binary_operator_spaces' => [",
      "      'default' => 'single_space',",
      "      'operators' => [",
      "          '=>' => null,",
      "      ],",
      "  ],",
      "  'blank_line_after_namespace' => true,",
      "  'blank_line_after_opening_tag' => true,",
      "  'blank_line_before_statement' => [",
      "      'statements' => [",
      "        'return',",
      "      ],",
      "  ],",
      "  'braces' => false,",
      "  'cast_spaces' => true,",
      "  'class_attributes_separation' => [",
      "      'elements' => [",
      "          'method' => 'one',",
      "      ],",
      "  ],",
      "  'class_definition' => true,",
      "  'concat_space' => [",
      "      'spacing' => 'one',",
      "  ],",
      "  'declare_equal_normalize' => true,",
      "  'encoding' => true,",
      "  'full_opening_tag' => true,",
      "  'fully_qualified_strict_types' => true,",
      "  'function_typehint_space' => true,",
      "  'heredoc_to_nowdoc' => true,",
      "  'include' => true,",
      "  'increment_style' => [",
      "    'style' => 'post',",
      "  ],",
      "  'indentation_type' => true,",
      "  'linebreak_after_opening_tag' => true,",
      "  'line_ending' => true,",
      "  'lowercase_cast' => true,",
      "  'constant_case' => true,",
      "  'lowercase_keywords' => true,",
      "  'lowercase_static_reference' => true,",
      "  'magic_method_casing' => true,",
      "  'magic_constant_casing' => true,",
      "  'method_argument_space' => [",
      "    'after_heredoc' => true,",
      "  ],",
      "  'native_function_casing' => true,",
      "  'no_alias_functions' => true,",
      "  'class_attributes_separation' => [",
      "      'elements' => [",
      "          'const' => 'one',",
      "          'method' => 'one',",
      "          'property' => 'one',",
      "          'trait_import' => 'none',",
      "      ],",
      "  ],",
      "  'no_blank_lines_after_class_opening' => true,",
      "  'no_blank_lines_after_phpdoc' => true,",
      "  'no_closing_tag' => true,",
      "  'no_empty_phpdoc' => true,",
      "  'no_empty_statement' => true,",
      "  'no_leading_import_slash' => true,",
      "  'no_leading_namespace_whitespace' => true,",
      "  'no_mixed_echo_print' => [",
      "    'use' => 'echo',",
      "  ],",
      "  'no_multiline_whitespace_around_double_arrow' => true,",
      "  'multiline_whitespace_before_semicolons' => [",
      "    'strategy' => 'no_multi_line',",
      "  ],",
      "  'no_short_bool_cast' => true,",
      "  'no_singleline_whitespace_before_semicolons' => true,",
      "  'no_spaces_after_function_name' => true,",
      "  'no_spaces_around_offset' => true,",
      "  'no_spaces_inside_parenthesis' => true,",
      "  'no_trailing_comma_in_list_call' => true,",
      "  'no_trailing_whitespace' => true,",
      "  'no_trailing_whitespace_in_comment' => true,",
      "  'no_unneeded_control_parentheses' => true,",
      "  'no_unreachable_default_argument_value' => true,",
      "  'no_useless_return' => true,",
      "  'no_whitespace_in_blank_line' => true,",
      "  'normalize_index_brace' => true,",
      "  'not_operator_with_successor_space' => false,",
      "  'object_operator_without_whitespace' => true,",
      "  'ordered_imports' => [",
      "    'sort_algorithm' => 'alpha',",
      "  ],",
      "  'phpdoc_indent' => true,",
      "  'general_phpdoc_tag_rename' => true,",
      "  'phpdoc_inline_tag_normalizer' => true,",
      "  'phpdoc_tag_type' => true,",
      "  'phpdoc_no_access' => true,",
      "  'phpdoc_no_package' => true,",
      "  'phpdoc_no_useless_inheritdoc' => true,",
      "  'phpdoc_scalar' => true,",
      "  'phpdoc_single_line_var_spacing' => true,",
      "  'phpdoc_summary' => true,",
      "  'phpdoc_to_comment' => true,",
      "  'phpdoc_trim' => true,",
      "  'phpdoc_types' => true,",
      "  'phpdoc_var_without_name' => true,",
      "  'psr_autoloading' => true,",
      "  'self_accessor' => true,",
      "  'short_scalar_cast' => true,",
      "  'no_unset_cast' => true,",
      "  'simplified_null_return' => false,",
      "  'single_blank_line_at_eof' => true,",
      "  'single_blank_line_before_namespace' => true,",
      "  'single_class_element_per_statement' => true,",
      "  'single_import_per_statement' => true,",
      "  'single_line_after_imports' => true,",
      "  'single_line_comment_style' => [",
      "      'comment_types' => [",
      "        'hash',",
      "      ],",
      "  ],",
      "  'single_quote' => true,",
      "  'space_after_semicolon' => true,",
      "  'standardize_not_equals' => true,",
      "  'switch_case_semicolon_to_colon' => true,",
      "  'switch_case_space' => true,",
      "  'ternary_operator_spaces' => true,",
      "  'trailing_comma_in_multiline' => [",
      "    'after_heredoc' => true,",
      "  ],",
      "  'unary_operator_spaces' => true,",
      "  'visibility_required' => [",
      "      'elements' => [",
      "          'method',",
      "          'property',",
      "          'const',",
      "      ],",
      "  ],",
      "  'no_unused_imports' => true,",
      "  'native_function_type_declaration_casing' => true,",
      "];",
      "",
      "\\$finder = Finder::create()->in([",
      "  __DIR__ . '/src',",
      "  __DIR__ . '/tests',",
      "])",
      "  ->name('*.php')",
      "  ->notName('*.blade.php')",
      "  ->ignoreDotFiles(true)",
      "  ->ignoreVCS(true);",
      "",
      "\\$config = new Config();",
      "",
      "return \\$config",
      "  ->setFinder(\\$finder)",
      "  ->setRules(\\$rules)",
      "  ->setRiskyAllowed(true)",
      "  ->setUsingCache(true)",
      "  ->setIndent(str_pad('', 2));"
    ],
    "description": ["PhpCsFixer config"]
  },
  "PDO connection": {
    "prefix": ["pdo_connection_string", "db_connection_pdo_string"],
    "body": [
      "\\$connString = \"mysql\" .",
      "  \":host=\" . \"127.0.0.1\" .",
      "  \";port=\" . DB_CONNECTION_PORT .",
      "  \";dbname=\" . DB_DATABASE;",
      "",
      "\\$db = new PDO(\\$connString, DB_USERNAME, DB_PASSWORD);"
    ],
    "description": ["PDO Connection"]
  }
}
