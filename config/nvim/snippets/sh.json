{
  "bash": {
    "prefix": ["bash", "#!", "shebang"],
    "body": ["#!/usr/bin/env bash", "# shellcheck disable=2034,2209,2135,2155"],
    "description": [
      "Option 1:\n",
      "#!/bin/bash\n",
      "Description: Shebang Bash executor.\n",
      "Option 2:\n",
      "#!/usr/bin/env bash\n",
      "Description: Shell searchs for the first match of bash in the $PATH environment variable.\n",
      "It can be useful if you aren't aware of the absolute path or don't want to search for it.\n"
    ]
  },
  "echo": {
    "prefix": "echo",
    "body": "echo \"${0:message}\"",
    "description": "Echo a message."
  },
  "read": {
    "prefix": "read",
    "body": "read -r ${0:VAR}",
    "description": "Read input of ${VAR}."
  },
  "if": {
    "prefix": "if",
    "body": "if [[ ${0:condition} ]]; then\n\t${1}\nfi",
    "description": "An IF statement."
  },
  "elseif": {
    "prefix": "elseif",
    "body": "elif [[ ${0:condition} ]]; then\n\t${1}",
    "description": "Add an elseif to an if statement."
  },
  "else": {
    "prefix": "else",
    "body": "else\n\t${0:command}",
    "description": "else"
  },
  "for_in": {
    "prefix": "forin",
    "body": ["for ${1:VAR} in $${2:LIST}; do", "  echo \"$${1:VAR}\" ", "done"],
    "description": "for loop in list"
  },
  "for_i": {
    "prefix": "fori",
    "body": "for ((${0:i} = 0; ${0:i} < ${1:10}; ${0:i}++)); do\n\techo \"$${0:i}\"\ndone\n",
    "description": "An index-based iteration for loop."
  },
  "while": {
    "prefix": "while",
    "body": "while [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
    "description": "A while loop by condition."
  },
  "until": {
    "prefix": "until",
    "body": "until [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
    "description": "until loop by condition"
  },
  "function": {
    "prefix": "function",
    "body": "${1:name} ()\n{\n\t${0}\n}",
    "description": [
      "This defines a function named name.\n",
      "The reserved word function is optional.\n",
      "If the function reserved word is supplied, the parentheses are optional.\n",
      "1. Recommended way:\n",
      "name() {}\n",
      "2. C-like-way:\nfunction name [()] {}"
    ]
  },
  "case": {
    "prefix": "case",
    "body": "case \"$${0:VAR}\" in\n\t${1:1}) echo 1\n\t;;\n\t${2:2|3}) echo 2 or 3\n\t;;\n\t*) echo default\n\t;;\nesac\n",
    "description": [
      "case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac\n",
      "A case command first expands word, and tries to match it against each pattern in turn."
    ]
  },
  "break": {
    "prefix": "break",
    "body": "break ${0}",
    "description": [
      "The break command tells Bash to leave the loop straight away.\n",
      "Enter the break or break (n) where n=number of loops."
    ]
  },
  "expr": {
    "prefix": "expr",
    "body": "expr ${0:1 + 1}",
    "description": "Calculate numbers with Bash."
  },
  "shellcheck disable": {
    "prefix": ["shellcheck_disable", "disable_shellcheck", "ignore_shellcheck"],
    "body": ["# shellcheck disable=${0:code}"],
    "description": "Shellcheck disable"
  },

  "run.sh": {
    "prefix": ["run.sh_snippet", "run.sh_template"],
    "body": [
      "#!/bin/bash",
      "# shellcheck disable=1090",
      "",
      "# -----------------------------------------------------------------------------",
      "# See also for inspiration:",
      "# https://github.com/nickjj/docker-flask-example/blob/main/run",
      "# -----------------------------------------------------------------------------",
      "",
      "# -----------------------------------------------------------------------------",
      "# Extend the search path so you can easily use executable that are not are the",
      "# normal search path",
      "# -----------------------------------------------------------------------------",
      "PATH=./node_modules/.bin:\\$PATH",
      "",
      "# -----------------------------------------------------------------------------",
      "# Helper functions start with _ and aren't listed in this script's help menu.",
      "# -----------------------------------------------------------------------------",
      "",
      "function _helper_function {",
      "  local env",
      "  local splitted_envs=\"\"",
      "",
      "  if [[ -n \"\\$1\" ]]; then",
      "      env=\"\\$1\"",
      "  elif [[ -e .env ]]; then",
      "      env=\".env\"",
      "  fi",
      "",
      "  if [[ -n \"\\$env\" ]]; then",
      "      set -a",
      "      . \\$env",
      "      set +a",
      "",
      "      splitted_envs=\\$(splitenvs \"\\$env\" --lines)",
      "  fi",
      "",
      "  printf \"%s\" \"\\$splitted_envs\"",
      "}",
      "",
      "function _wait_until {",
      "  command=\"\\${1}\"",
      "  timeout=\"\\${2:-30}\"",
      "",
      "  echo -e \"\\n\\n\\n=Running: \\$command=\\n\\n\"",
      "",
      "  i=0",
      "  until eval \"\\${command}\"; do",
      "      ((i++))",
      "",
      "      if [ \"\\${i}\" -gt \"\\${timeout}\" ]; then",
      "          echo -e \"\\n\\n\\n=Command: \\$command=\"",
      "          echo -e \"failed, aborting due to \\${timeout}s timeout!\\n\\n\"",
      "          exit 1",
      "      fi",
      "",
      "      sleep 1",
      "  done",
      "",
      "  echo -e \"\\n\\n\\n= Done successfully running: \\$command =\\n\\n\"",
      "}",
      "",
      "function _timestamp {",
      "  date +'%s'",
      "}",
      "",
      "function _raise_on_no_env_file {",
      "  if [[ -n \"\\$SOME_ENV_EXISTS\" ]]; then",
      "      return 0",
      "  fi",
      "",
      "  if [[ -z \"\\$1\" ]] || [[ ! -e \"\\$1\" ]]; then",
      "      printf \"\\nenv filename has not been provided or invalid.\\n\"",
      "      printf \"You may also source your environment file.\\n\\n\"",
      "      exit 1",
      "  fi",
      "}",
      "",
      "function _has_internet {",
      "  if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then",
      "      printf 0",
      "  fi",
      "",
      "  printf 1",
      "}",
      "",
      "function build {",
      "  : \"Build the project\"",
      "  echo \"build task not implemented\"",
      "}",
      "",
      "function default {",
      "  : \"Run a default task\"",
      "  build",
      "}",
      "",
      "function help {",
      "  : \"List available tasks.\"",
      "  : \"They can span multiple lines if needed\"",
      "  compgen -A function | grep -v \"^_\" | while read -r name; do",
      "      paste <(printf '%s' \"\\$name\") <(type \"\\$name\" | sed -nEe 's/^[[:space:]]*: ?\"(.*)\";/    \\1/p')",
      "  done",
      "",
      "  printf \"\\n\"",
      "}",
      "",
      "TIMEFORMAT=\"Task completed in %3lR\"",
      "time \"\\${@:-default}\""
    ],
    "description": ["run.sh template"]
  },
  "helper func": {
    "prefix": ["helper_func"],
    "body": [
      "# -----------------------------------------------------------------------------",
      "# $0",
      "# -----------------------------------------------------------------------------"
    ],
    "description": "Helper function"
  }
}
