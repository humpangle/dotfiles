{
  // https://github.com/Nash0x7E2/awesome-flutter-snippets
  "Stateless Widget": {
    "prefix": "stl",
    "body": [
      "//import 'package:flutter/material.dart'$0;",
      "class ${1:name} extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(height: 60.0, color: Colors.orange,);",
      "  }",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "stf",
    "body": [
      "//import 'package:flutter/material.dart'$0;",
      "class ${1:name} extends StatefulWidget {",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:index}State extends State<${1:index}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(height: 60.0, color: Colors.orange,);",
      "  }",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "buildwidgetmethod",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:Container()};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "custompainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Create custom shapes"
  },
  "InitState ": {
    "prefix": "initstate",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Called by the framework when this object is inserted into the tree exactly once for each State object."
  },
  "Dispose": {
    "prefix": "dispose",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "Reassemble": {
    "prefix": "reassemble",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didupdatewidget",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "Stateful Builder": {
    "prefix": "statefulBldr",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      ")"
    ],
    "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
  },
  "Orientation Builder": {
    "prefix": "orientationBldr",
    "body": [
      "OrientationBuilder(",
      "  builder: (BuildContext context, Orientation orientation) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      ")"
    ],
    "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
  },
  "Layout Builder Widget": {
    "prefix": "layoutbuilder_widget",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints,) {",
      "    return ${0:Container()};",
      "  },",
      ")"
    ],
    "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
  },
  "Future Builder": {
    "prefix": "futureBldr",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return ${3:};",
      "  },",
      ")"
    ],
    "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
  },
  "No Such Method": {
    "prefix": "nosm",
    "body": [
      "@override",
      "dynamic noSuchMethod(Invocation invocation) {",
      "  ${1:}",
      "}"
    ],
    "description": "This method is invoked when a non-existent method or property is accessed."
  },
  "Mounted": {
    "prefix": "mounted",
    "body": ["@override", "bool get mounted {", "  ${0:}", "}"],
    "description": "Whether this State object is currently in a tree."
  },
  "Sink": {
    "prefix": "snk",
    "body": [
      "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A Sink is the input of a stream."
  },
  "Stream": {
    "prefix": "strm",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A source of asynchronous data events. A stream can be of any data type <T>"
  },
  "Subject": {
    "prefix": "subj",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;",
      "final _${2:name}Subject = BehaviorSubject<${1:type}>();"
    ],
    "description": "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream."
  },
  "toString": {
    "prefix": "tostring",
    "body": ["@override", "String toString() {", "return ${1:''};", " }"],
    "description": "Returns a string representation of this object."
  },
  "debugPrint": {
    "prefix": "debugP",
    "body": ["debugPrint(${1:statement});"],
    "description": "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
  },
  "Material Package": {
    "prefix": "importM",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import flutter material package"
  },
  "Cupertino Package": {
    "prefix": "importC",
    "body": "import 'package:flutter/cupertino.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "flutter_test Package": {
    "prefix": "importFT",
    "body": "import 'package:flutter_test/flutter_test.dart';",
    "description": "Import flutter_test package"
  },
  "Value Listenable Builder": {
    "prefix": "valueListenableBuilder",
    "body": [
      "ValueListenableBuilder(",
      "    valueListenable: ${1: null},",
      "    builder: (BuildContext context, ${2:dynamic} value, Widget child) {",
      "       return ${3: Container();}",
      "    },",
      " ),"
    ],
    "description": "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
  },
  "Test": {
    "prefix": "f-test",
    "body": ["test(", "   \"${1:test description}\",", "   () {},", ");"],
    "description": "Create a test function"
  },
  "Test Widgets": {
    "prefix": "widgetTest",
    "body": [
      "testWidgets(",
      "   \"${1:test description}\",",
      "   (WidgetTester tester) async {},",
      ");"
    ],
    "description": "Create a testWidgets function"
  },
  "class def": {
    "prefix": "classdef",
    "body": [
      "class ${1:class_name} {",
      "  final String field $0;",
      "",
      "  ${1:class_name}({required this.field});",
      "}"
    ],
    "description": "class definition"
  },
  "final Widget x": {
    "prefix": "fwx",
    "body": ["final Widget x = $1 ;"],
    "description": "final Widget x"
  },
  "BlocProvider.of Cubit": {
    "prefix": "blocproviderof_cubit",
    "body": ["BlocProvider.of<${1:Cubit}>(context).${2:function_name}($0);"],
    "description": "BlocProvider.of Cubit"
  },
  "Theme.of": {
    "prefix": "themeof",
    "body": [
      "Theme.of(context).${1:accentColor}",
      "// primaryColor brightness fontFamily textTheme.bodyText2 textTheme.headline1 textTheme.headline6",
      "// textTheme.display1 textTheme.body1"
    ],
    "description": "Theme.of"
  },
  "Navigator.pushNamed": {
    "prefix": "navigatorpushnamed",
    "body": [
      "// in Route generateRoute(RouteSettings settings)",
      "// final todo = settings.arguments as Todo;",
      "Navigator.pushNamed(context, ${1:routeName} ${2:,arguments: arg});"
    ],
    "description": "Navigator.pushNamed"
  },
  "Cubit + State Definition": {
    "prefix": "cubit_definition",
    "body": [
      "$0// import 'package:bloc/bloc.dart';",
      "// import 'package:meta/meta.dart';",
      "",
      "//////////// ${1:Name}State",
      "",
      "@immutable",
      "abstract class ${1:Name}State {}",
      "",
      "class ${1:Name}Initial extends ${1:Name}State {}",
      "",
      "//////////// END ${1:Name}State",
      "",
      "//////////// ${1:Name}Cubit",
      "",
      "class ${1:Name}Cubit extends Cubit<${1:Name}State> {",
      "",
      " ${1:Name}Cubit() : super(${1:Name}Initial(),);",
      "}",
      "",
      "//////////// END ${1:Name}Cubit"
    ],
    "description": "Cubit + State Definition"
  },
  "MediaQuery Of Context": {
    "prefix": "mediaqueryofcontext",
    "body": [
      "MediaQuery.of(context).size.width,$0",
      "//BuildContext context",
      "//size.height"
    ],
    "description": "MediaQuery Of Context"
  },
  "Wait for test function definition": {
    "prefix": "waitfortestdefinition",
    "body": [
      "/// Hack to emulate dynamic wait:",
      "/// retry assertion for times between 0 and at least 50ms, but throw if",
      "/// assertion not matched at the end of all wait times.",
      "",
      "Future<T?> wait<T>(",
      " WidgetTester tester,",
      " T Function() expectCallback, {",
      " List<int> waitTimes = const [],",
      "}) async {",
      " List<int> allWaitTimes = [0, 50] + waitTimes;",
      "",
      " final int waitTimesLen = allWaitTimes.length;",
      " final int indexThrowError = waitTimesLen - 1;",
      "",
      " for (int timeIndex = 0; timeIndex < waitTimesLen; timeIndex++) {",
      "   int waitTime = allWaitTimes[timeIndex];",
      "",
      "   await tester.pump(",
      "     Duration(milliseconds: waitTime),",
      "   );",
      "",
      "   try {",
      "     return expectCallback();",
      "   } catch (e) {",
      "     if (timeIndex == indexThrowError) {",
      "       throw e;",
      "     }",
      "   }",
      " }",
      "}"
    ],
    "description": "Wait for test function definition"
  },
  "Wait for test": {
    "prefix": "waitfor",
    "body": [
      "await wait(",
      " tester,",
      " () {",
      "   $0",
      " },",
      " // waitTimes: const [],",
      ");"
    ],
    "description": "Wait for test"
  },
  "Print to console": {
    "prefix": "printconsole",
    "body": [
      "print(",
      " '\\n====================Logging START==================\\n'",
      " '    Debug label: ${1:label}\\n'",
      "// ignore: unnecessary_brace_in_string_interps",
      " '\\${$0}'",
      " '\\n======================Logging END==================\\n',",
      ");"
    ],
    "description": "Print to console"
  },
  "Navigator Push": {
    "prefix": "navigaorpush",
    "body": [
      "Navigator.push(",
      " context,",
      " MaterialPageRoute(",
      "   builder: (materialPageRouteContext) {",
      "     return Container();",
      "   },",
      " ),",
      ")"
    ],
    "description": "Navigator Push"
  }
}
