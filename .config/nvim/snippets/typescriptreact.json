{
  "Export react class component": {
    "prefix": "exportreactclass",
    "body": [
      "import React from \"react\";",
      "",
      "export class ${1:Comp} extends React.Component<{}, {}> {",
      "\trender() {",
      "\t\t\treturn ${2:<div>1</div>};",
      "\t}",
      "}"
    ],
    "description": "Export react class component"
  },
  "test react": {
    "prefix": "testreact",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "/* eslint-disable @typescript-eslint/no-unused-vars*/",
      "import React, { ComponentType } from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"../components/${1:Component}/\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "});",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp();",
      "\texpect(1).toBe(1)",
      "\trender(ui);",
      "});",
      "",
      "// HELPER FUNCTIONS /////////////////////////////////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<{}>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<{}> } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component}P {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },
  "react test": {
    "prefix": "reacttest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "/* eslint-disable @typescript-eslint/no-unused-vars*/",
      "import React, { ComponentType } from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"../components/${1:Component}/\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "});",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp();",
      "\texpect(1).toBe(1)",
      "\trender(ui);",
      "});",
      "",
      "// HELPER FUNCTIONS /////////////////////////////////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<{}>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<{}> } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component}P {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },
  "Export react functional Component": {
    "prefix": "exportreactfunction",
    "body": [
      "import React from \"react\";",
      "",
      "export function ${1:Component}(props: {}) {",
      "\treturn ${2:<div>1</div>};",
      "}"
    ],
    "description": "Export react functional Component"
  },

  "useEffect react": {
    "prefix": "useEffectReact",
    "body": ["useEffect(() => { ${2} }, [${1}])"],
    "description": "useEffect react"
  },
  "effect useEffect definition": {
    "prefix": "effectuseeffect",
    "body": [
      "const {",
      "\teffects: {",
      "\t\t\trunOnRenders,",
      "\t\t\tcontext: { effectsArgsObj },",
      "\t\t\trunOnce: { runOnceExample },",
      "\t},",
      "} = stateMachine;",
      "",
      "",
      "const runRunOnceExample =",
      "\trunOnceExample && runOnceExample.run;",
      "",
      "useEffect(() => {",
      "\tif (runOnRenders.value !== StateValue.effectValHasEffects) {",
      "\t\t\treturn;",
      "\t}",
      "",
      "\tconst {",
      "\t\t\thasEffects: { context },",
      "\t} = runOnRenders;",
      "",
      "\trunEffects(context.effects, effectsArgsObj);",
      "",
      "\tconst { cleanupEffects } = context;",
      "",
      "\tif (cleanupEffects.length) {",
      "\t\t\treturn () => {",
      "\t\t\t\t\trunEffects(cleanupEffects, effectsArgsObj);",
      "\t\t\t};",
      "\t}",
      "",
      "\t// redundant - [tsserver 7030] [W] Not all code paths return a value.",
      "\treturn;",
      "",
      "\t/* eslint-disable-next-line react-hooks/exhaustive-deps*/",
      "}, [runOnRenders]);",
      "",
      "useEffect(() => {",
      "\t\tif (runRunOnceExample) {",
      "\t\t\t\tconst {",
      "\t\t\t\t\t\teffect: { key, effectArgKeys, ownArgs },",
      "\t\t\t\t} = runOnceExample as RunOnceExampleState;",
      "",
      "\t\t\t\tconst args = getEffectArgsFromKeys(effectArgKeys, effectsArgsObj);",
      "",
      "\t\t\t\treturn effectFunctions[key](",
      "\t\t\t\t\t\targs,",
      "\t\t\t\t\t\t/* eslint-disable-next-line @typescript-eslint/no-explicit-any*/",
      "\t\t\t\t\t\townArgs as any,",
      "\t\t\t\t) as (() => void);",
      "\t\t}",
      "",
      "\t// redundant - [tsserver 7030] [W] Not all code paths return a value.",
      "\t\treturn;",
      "",
      "\t\t/* eslint-disable-next-line react-hooks/exhaustive-deps*/",
      "}, [runRunOnceExample]);"
    ],
    "description": "effect useEffect definition"
  },
  "actReactTest": {
    "prefix": "actReactTest",
    "body": ["act(() => {", "\t${1}", "});"],
    "description": "actReactTest"
  },
  "import svg react": {
    "prefix": "importsvgreact",
    "body": ["import { ReactComponent as ${1} } from \"${2}.svg\";"],
    "description": "import svg react"
  },
  "import react svg": {
    "prefix": "importreactsvg",
    "body": ["import { ReactComponent as ${1} } from \"${2}.svg\";"],
    "description": "import react svg"
  }
}
