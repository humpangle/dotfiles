{
  "update git patch": {
    "prefix": [
      "gitPatchUpdate",
      "updateGitPatch",
      "patchGitUpdate"
    ],
    "body": [
      "Update your context with git patch",
      ""
    ],
    "description": [
      "update with git patch"
    ]
  },
  "update git patch suggest commit": {
    "prefix": [
      "gitPatchUpdateCommit",
      "updateGitPatchCommit",
      "updateGitPatchCommit",
      "commitUpdateGitPatch"
    ],
    "body": [
      "",
      "Update your context with git patch and suggest commit message",
      ""
    ],
    "description": [
      "update git patch suggest commit"
    ]
  },
  "Suggest commit msg": {
    "prefix": [
      "suggest_commit_message",
      "commit_message_suggest"
    ],
    "body": [
      "",
      "Suggest commit message",
      ""
    ],
    "description": [
      "Suggest commit msg"
    ]
  },
  "Apply suggested changes": {
    "prefix": [
      "apply_changes",
      "changes_apply"
    ],
    "body": "Apply suggested changes",
    "description": [
      "Apply suggested changes"
    ]
  },
  "Triple fence": {
    "prefix": [
      "triple_fence",
      "fence_triple",
      "quote_triple",
      "triple_quote"
    ],
    "body": [
      "\"\"\"",
      "$0",
      "\"\"\""
    ],
    "description": [
      "Triple fence"
    ]
  },
  "update code in buffer": {
    "prefix": [
      "update_code_buffer",
      "update_buffer_code",
      "buffer_update_code",
      "buffer_code_update"
    ],
    "body": "Update code in #buffer using the @editor tool",
    "description": [
      "update code in buffer llm"
    ]
  },
  "generate commit message 1 shot": {
    "prefix": [
      "gen_git_commit1",
      "commit_git_gen1",
      "commit_gen_git1",
      "git_gen_commit1"
    ],
    "body": [
      "<details>",
      "<summary><code>⫸ Prompt: Inspect, draft, and commit</code></summary>",
      "  I’ve already staged some changes.",
      "  Do the following in one go:",
      "  1. Run `git diff --no-ext-diff --staged`.",
      "  2. Generate a descriptive, sentence‑case commit message with a brief subject line and a body explaining why the change was made.",
      "  3. Commit the staged changes using that message (i.e. run `git commit -m \"<subject>\" -m \"<body>\"`).",
      "  Use the style:",
      "  - Subject max ~120 chars, sentence case (no period at end).",
      "  - Body wraps at ~120 chars, explains rationale.",
      "</details>"
    ],
    "description": [
      "generate commit message 1 shot"
    ]
  },
  "generate commit message 2 shots": {
    "prefix": [
      "gen_git_commit2",
      "commit_git_gen2",
      "commit_gen_git2",
      "git_gen_commit2"
    ],
    "body": [
      "<details>",
      "<summary><code>⫸ Prompt #1: Draft commit message</code></summary>",
      "  I’ve staged some changes.$0",
      "  Run `git diff --no-ext-diff --staged` and propose a concise, sentence‑case commit message:",
      "  - One‑line subject (~120 chars, no trailing period).",
      "  - Multi‑line body (wrap ~120 chars) explaining why.",
      "</details>",
      "",
      "<details>",
      "<summary><code>⫸ Prompt #2: Commit with approved message</code></summary>",
      "  Commit the staged changes with the message we just finalized.",
      "  Run: git commit -m \"<subject>\" -m \"<body>\"",
      "</details>"
    ],
    "description": [
      "generate commit message 2 shot"
    ]
  },
  "context cmd cmd_runner tool": {
    "prefix": [
      "context"
    ],
    "body": [
      "",
      "> Context:",
      "> - <tool>cmd_runner</tool>",
      ""
    ],
    "description": [
      "context"
    ]
  },
  "extract pr reviewier comment": {
    "prefix": [
      "pr_reviewer_comment",
      "reviewer_comment_pr"
    ],
    "body": [
      "Store the PR analysis at `.___scratch/pr/<pr-number>--<pr-title>.md`",
      "",
      "Filename format:",
      "- Extract PR number and title (e.g., \"366\" and \"SCHED-4998 Implement Clock In/Out Component...\")",
      "- Keep ticket ID (SCHED-4998) in uppercase",
      "- Convert remaining title to lowercase",
      "- Replace non-filename-safe characters with hyphens",
      "- Truncate to ~60 chars after ticket ID",
      "- Example: `366-SCHED-4998--implement-clock-in-out-component-use-cases-for-combination.md`",
      "",
      "",
      "Summarize reviewer's comments. Write (update) to .___scratch/pr/366-SCHED-4998--implement-clock-in-out-component-use-cases-for-combination.md"
    ],
    "description": [
      "extract pr reviewier comment"
    ]
  },
  "Anki Debug": {
    "prefix": [
      "anki_debug"
    ],
    "body": [
      "Based on the debugging and fix we just completed, create spaced-repetition flashcards that capture the key learning points. Focus on:",
      "- The root cause of the issue",
      "- Why the solution works",
      "- When this pattern applies",
      "- Best practices to prevent similar issues",
      "Format each as Q&A pairs suitable for Anki or similar SRS tools.\""
    ],
    "description": [
      "Anki Debug"
    ]
  },
  "Anki Comprehensive": {
    "prefix": [
      "anki_comprehensive"
    ],
    "body": [
      "I’d like to create an Anki deck that comprehensively covers all concepts discussed in",
      "this conversation — including both my prompts and your responses.",
      "uploaded PDF",
      "uploaded image",
      "uploaded video",
      "",
      "Please generate:",
      "1. A CSV file (comma-separated values), UTF-8 encoded, suitable for Anki import.",
      "    - Each row should represent **one flashcard**.",
      "    - The first column is the **front (question)**.",
      "    - The second column is the **back (answer)**.",
      "    - Do not include headers.",
      "    - Use double quotes around each field if needed to preserve formatting.",
      "",
      "2. Flashcard format:",
      "    - Use clear **Q → A** format.",
      "    - Keep questions concise and direct.",
      "    - Write full, precise, and clear answers (even if long).",
      "    - Include key examples, tables, and bullet points if they aid understanding.",
      "    - Use `code blocks` for commands or code snippets.",
      "",
      "3. Optional enhancements:",
      "    - If helpful, reference **image filenames** like `diagram_git_diff_submodule.png` after the answer.",
      "        Add a short caption on a new line.",
      "    - Add **mnemonics** where relevant at the end of the answer using the format: `Mnemonic: ...`",
      "",
      "4. Coverage:",
      "    - Include all meaningful concepts from the conversation: Git commands (`git diff`, `--submodule`), submodules, index SHAs, submodule config options, etc.",
      "    - Include comparisons, explanations, best practices, and configuration settings discussed.",
      "",
      "Return only the downloadable CSV file — no inline content or additional commentary.",
      "",
      "Return only the CSV content — no extra commentary or explanations.",
      "",
      "Return only the flashcard content without any headings or commentary, so it can be pasted directly into Anki."
    ],
    "description": [
      "Anki Comprehensive"
    ]
  }
}
