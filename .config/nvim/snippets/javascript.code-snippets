{
  "Compare previous and current props": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "compareprops",
    "body": [
      "React.memo(",
      "  ${1:func},",
      "",
      "(a, b) => {",
      "  Object.entries(a).forEach(([k, v]) => {",
      "      if (v !== b[k]) {",
      "          console.log(",
      "              \"\\n  Logging start\\n\\n\\n\\n a !== b\\n\",",
      "              k,",
      "              \"\\n\",",
      "              v,",
      "              \"\\n\\n\",",
      "              b[k],",
      "              \"\\n\\n\\n\\n    Logging ends\\n\"",
      "          );",
      "      }",
      "  });",
      "",
      "      return false;",
      "  }",
      "",
      ");"
    ],
    "description": "Compare previous and current props"
  },
  "Export react functional Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "exportreactfunction",
    "body": [
      "import React from \"react\";",
      "",
      "export function ${1:Component}(props) {",
      "  return ${2:<div>1</div>};",
      "}"
    ],
    "description": "Export react functional Component"
  },
  "Print to console": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "consolelogapplog",
    "body": [
      "console.log(",
      "  `\\n======================Logging start==================\\n",
      "      Label: ${1:label}",
      "  `,",
      "  ${1:code},",
      "  `\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },
  "Print to console error": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "consolelogapplogerror",
    "body": [
      "console.log(",
      "  `\\n======================Logging start==================\\n",
      "      Label: ${1:label}",
      "  `,",
      "  new Error().stack,",
      "  `\\n\\n`,",
      "  ${1:code},",
      "  `\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },
  "actReactTest": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "actReactTest",
    "body": ["act(() => {", "  ${1}", "});"],
    "description": "actReactTest"
  },
  "console.log JSON.stringify": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "consolelogjson",
    "body": [
      "console.log(",
      "  `\\n======================Logging start==================\\n",
      "      Label: ${1:label}",
      "  `,",
      "  JSON.stringify(${1:code}, null, 2),",
      "  `\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "console.log JSON.stringify"
  },
  "describeTest": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "describeTest",
    "body": [
      "describe(\"${1:describe_label}\", () => {",
      "   it(\"${2:test_label}\", async () => {",
      "",
      "  })",
      "})"
    ],
    "description": "describe test jest"
  },
  "dom ready": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "domready",
    "body": [
      "function domRead() {}",
      "",
      "if (document.readyState !== \"loading\") {",
      "  console.log(\"loading\");",
      "",
      "  domRead();",
      "} else {",
      "  document.addEventListener(\"DOMContentLoaded\", domRead);",
      "  console.log(\"ready\");",
      "}"
    ],
    "description": "dom ready"
  },
  "eslint-disable": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eslint-disable",
    "body": "/* eslint-disable ${1} */",
    "description": "eslint disable"
  },
  "eslint-disable-next-line": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line ${1} */",
    "description": "eslint disable next line"
  },
  "callback param JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "callbackparam",
    "body": [
      "/**",
      "* @callback ${1:NameYourType}",
      "* @param {${2:type}} ${3:paramName} ${4:description} ${6}",
      "* @returns {${5:returnType}}",
      "*/"
    ],
    "description": "callback param JSDOC"
  },
  "first object param of function first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectf",
    "body": [
      "/**",
      "* @param {Object} ${1:paramName}",
      "* @param {${2:type}} ${1:paramName}.${3:propertyName} ${4:description}",
      "*/"
    ],
    "description": "first object param of function first time JSDOC"
  },
  "function param first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "param",
    "body": [
      "/**",
      "* @param {${1:type}} ${2:paramName} ${3:description}${5}",
      "* @returns {${4:returnType}}",
      "*/"
    ],
    "description": "function param first time JSDOC"
  },
  "function param next time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramn",
    "body": ["@param {${1:type}} ${2:paramName} ${3:description}"],
    "description": "function param next time JSDOC"
  },
  "function param object next time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectn",
    "body": [
      "@param {Object} ${1:paramName}",
      "* @param {${2:type}} ${1:paramName}.${3:propertyName} ${4:description}"
    ],
    "description": "function param object next time JSDOC"
  },
  "function param return JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramr",
    "body": ["@return {${1:returnType}}"],
    "description": "function param return JSDOC"
  },
  "next/addition object param of function JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectn",
    "body": [
      "@param {${1:type}} ${2:paramName}.${3:propertyName} ${4:description}"
    ],
    "description": "next/addition object param of function JSDOC"
  },
  "next/addition1 object param of function JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectopt",
    "body": [
      "@param {${1:type}} ${2:paramName}.${3:propertyName} ${4:description}"
    ],
    "description": "next/addition object param of function JSDOC"
  },
  "typdef import first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefimport",
    "body": ["/**", "* @typedef { import('${1}').${2} } ${2} ${3}", "*/"],
    "description": "typdef import first time JSDOC"
  },
  "typdef import next time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefimportn",
    "body": ["* @typedef { import('${1}').${2} } ${2} ${3}"],
    "description": "typdef import next time JSDOC"
  },
  "typdef object first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefobject",
    "body": [
      "/**",
      "* @typedef {Object} ${1:NameYourType}",
      "* @property {${2:type}} ${3:propertyName} ${4:description}",
      "*/"
    ],
    "description": "typdef object first time JSDOC"
  },
  "typdef object next.additional property JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefobjectn",
    "body": ["@property {${1:type}} ${2:propertyName} ${3:description}"],
    "description": "typdef object next.additional property JSDOC"
  },
  "typdef object optional property JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefobjectopt",
    "body": ["@property {${1:type}=} ${2:propertyName} ${3:description}"],
    "description": "typdef object optional property JSDOC"
  },
  "type assertion JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typeassert",
    "body": ["/** @type {${1:type}} */ (${2:value})", "${3}"],
    "description": "type assertion JSDOC"
  },
  "type variable declaration JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typevar",
    "body": ["/**", "* ${1:description}", "* @type {${2:type}}", "*/", "${3}"],
    "description": "type variable declaration JSDOC"
  },
  "optional function param JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramopt",
    "body": ["@param {${1:type}=} ${2:paramName}"],
    "description": "optional function param JSDOC"
  },
  "graphql mutation tag": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "mutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "  mutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "      ${3:function_name}(input: $input) {",
      "",
      "      }",
      "  }",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },
  "graphql mutation tag1": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "graphqlmutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "  mutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "      ${3:function_name}(input: $input) {",
      "",
      "      }",
      "  }",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },
  "helper funcs": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "helperfuncs",
    "body": [
      "// ====================================================",
      "// START ${1}",
      "// ====================================================",
      "// ${2}",
      "// ====================================================",
      "// END ${1}",
      "// ===================================================="
    ],
    "description": "Helper functions header"
  },
  "immediately invoked function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "iife",
    "body": ["( function ${1:funName}(){", "  ${2}", "})();"],
    "description": "immediately invoked function expression"
  },
  "istanbul ignore else": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istanbulelse",
    "body": ["// istanbul ignore else:"],
    "description": "istanbul ignore else"
  },
  "istanbul ignore next": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istanbulnext",
    "body": ["// istanbul ignore next:"],
    "description": "istanbul ignore next"
  },
  "istanbul ignore file": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istanbulfile",
    "body": ["/* istanbul ignore file */", ""],
    "description": "istanbul ignore next"
  },
  "jest-environment-jsdom-sixteen": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "jsdomenvsixteen",
    "body": ["/**", "* @jest-environment jest-environment-jsdom-sixteen", "*/"],
    "description": "@jest-environment jest-environment-jsdom-sixteen"
  },
  "new promise": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "newpromise",
    "body": ["new Promise((resolve, reject) => {", "${1}", "})"],
    "description": "new promise"
  },
  "object define property": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "objectdefineProperty",
    "body": [
      "Object.defineProperty(",
      "${1:object},",
      "'${2:property}',",
      "{",
      "  get : function $1_$2_getter() {",
      "    // getter code",
      "  },",
      "  set : function $1_$2_setter(value) {",
      "    // setter code",
      "  },",
      "  value        : ${3:value},",
      "  writable    : ${4:boolean},",
      "  enumerable   : ${5:boolean},",
      "  configurable : ${0:boolean}",
      "}",
      ");"
    ],
    "description": "object define property"
  },
  "react test": {
    "scope": "javascript,javascriptreact,typescriptreact",
    "prefix": "reacttest-file",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import \"@testing-library/jest-dom\";",
      "import { cleanup, render } from \"@testing-library/react\";",
      "import React, { ComponentType } from \"react\";",
      "import { act } from \"react-dom/test-utils\";",
      "import { ${1:Component} } from \"../${1:Component}\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "  jest.clearAllMocks();",
      "});",
      "",
      "describe(\"components\", () => {",
      "  it(\"test_name\", async () => {",
      "      const { ui } = makeComp();",
      "",
      "      await act(async () => {",
      "          // when app renders",
      "          // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "          const { debug } = render(ui);",
      "          $0",
      "          // import { cleanup, fireEvent, render, waitFor } from \"@testing-library/react\";",
      "          //await waitFor(() => {",
      "          // expect(1).not.toBeNull()",
      "          //});",
      "      });",
      "  });",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<Props>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<Props> } = {}) {",
      "  return {",
      "      ui: <${1:Component}P {...props} />,",
      "  };",
      "}",
      "",
      "type Props = {};"
    ],
    "description": "react test"
  },
  "svelte test": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "sveltetest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, wait } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "  render(${1}, {",
      "      segment: \"\"",
      "  });",
      "",
      "  await wait(() => true);",
      "});"
    ],
    "description": "svelte test"
  },
  "ternary operation": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ter",
    "body": ["${1:condition} ? ${2:truthy} : ${0:falsy}"],
    "description": "ternary operation"
  },
  "test react": {
    "scope": "javascript,javascriptreact,typescriptreact",
    "prefix": "testreact-file",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import \"@testing-library/jest-dom\";",
      "import { cleanup, render } from \"@testing-library/react\";",
      "import React, { ComponentType } from \"react\";",
      "import { act } from \"react-dom/test-utils\";",
      "import { ${1:Component} } from \"../${1:Component}\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "  jest.clearAllMocks();",
      "});",
      "",
      "describe(\"components\", () => {",
      "  it(\"test_name\", async () => {",
      "      const { ui } = makeComp();",
      "",
      "      await act(async () => {",
      "          // when app renders",
      "          // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "          const { debug } = render(ui);",
      "          $0",
      "          // import { cleanup, fireEvent, render, waitFor } from \"@testing-library/react\";",
      "          //await waitFor(() => {",
      "          // expect(1).not.toBeNull()",
      "          //});",
      "      });",
      "  });",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<Props>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<Props> } = {}) {",
      "  return {",
      "      ui: <${1:Component}P {...props} />,",
      "  };",
      "}",
      "",
      "type Props = {};"
    ],
    "description": "test react"
  },
  "test react test": {
    "prefix": "testreact-test",
    "body": [
      "it(\"${1:test_name}\", async () => {",
      "",
      "  // import { act } from \"react-dom/test-utils\";",
      "  await act(async () => {",
      "      // when app renders",
      "      // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "      const { debug } = render(${2:app_name});",
      "",
      "      // import \"@testing-library/jest-dom\";",
      "      // import { cleanup, fireEvent, render, waitFor } from \"@testing-library/react\";",
      "      //await waitFor(() => {",
      "          // expect().not.toBeNull()",
      "      //});",
      "  });",
      "});"
    ],
    "description": "test react test"
  },
  "test svelte": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "testsvelte",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, wait } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "  render(${1}, {",
      "    segment: \"\"",
      "  });",
      "",
      "  await wait(() => true);",
      "});"
    ],
    "description": "test svelte"
  },
 nelstrom/vim-visual-star-search "useEffect react": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useEffectReact",
    "body": ["useEffect(() => { ${2} }, [${1}])"],
    "description": "useEffect react"
  },
  "ts-ignore": {
    "scope": "javascript,javascriptreact",
    "prefix": "tsignore",
    "body": ["// @ts-ignore"],
    "description": "ts-ignore"
  },
  "ts-nocheck": {
    "scope": "javascript,javascriptreact",
    "prefix": "tsnocheck",
    "body": ["// @ts-nocheck"],
    "description": "ts-nocheck"
  }
}
