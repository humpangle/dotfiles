{
  "bash": {
    "prefix": [
      "bash",
      "#!",
      "shebang"
    ],
    "body": [
      "#!/usr/bin/env python"
    ],
    "description": [
      "python shebang"
    ]
  },
  "print python to console": {
    "prefix": [
      "print_to_console",
      "console_print",
      "print_inspect",
      "inspect_print"
    ],
    "body": [
      "",
      "# NOTE: --START-- DEBUG LOG {",
      "print(",
      "\t\"\\n\\n((\\n\",",
      "\t\"LOG TOPIC: $1$2\",",
      "\t\"\\n(\\n\",",
      "\t${1:code},",
      "\t# (lambda: __import__(\"json\").dumps($1))(),",
      "\t# \"\\n\",",
      "\t# mock.mock_calls,",
      "\t# \"\\n\",",
      "\t# \"\\n\",",
      "\t# \"\\n\",",
      "\t# \"\\n\",",
      "\t\"TYPE:\",",
      "\ttype($1),$0",
      "\tf\"\\n{__file__}:{(lambda: __import__('inspect').currentframe().f_lineno)()}\"",
      "\t\"\\n))\\n\",",
      ")",
      "# assert 1 == 2",
      "# NOTE: --END-- DEBUG LOG }",
      ""
    ],
    "description": "print python to console"
  },
  "log python to console": {
    "prefix": [
      "log_to_console",
      "console_log",
      "log_inspect",
      "inspect_log"
    ],
    "body": [
      "",
      "# NOTE: --START-- DEBUG LOG {",
      "(",
      "      lambda: __import__(\"logging\")",
      "      .getLogger(__name__)",
      "      .info(f\"\\n\\n $1 ======\\n {$1} \\n\\n\")",
      ")()",
      "# NOTE: --END-- DEBUG LOG }",
      ""
    ],
    "description": [
      "log python to console"
    ]
  },
  "helper function": {
    "prefix": "helper_function",
    "body": "############################ ${1:title} ############################## noqa",
    "description": "helper function"
  },
  "coding utf-8": {
    "prefix": [
      "coding_utf8",
      "encoding_utf"
    ],
    "body": "# -*- coding: utf-8 -*-\n\n",
    "description": "coding utf-8"
  },
  "E501": {
    "prefix": [
      "noqa_e501"
    ],
    "body": "  # noqa E501",
    "description": "noqa E501"
  },
  "type ignore": {
    "prefix": [
      "type_ignore"
    ],
    "body": "  # type: ignore${1} # noqa F821",
    "description": "type ignore"
  },
  "sys.exc_info": {
    "prefix": [
      "sys_exec_info",
      "exec_info_sys"
    ],
    "body": [
      "import sys;print('\\n\\n',  *sys.exc_info(), sep='\\n\\n');print('\\n\\n')"
    ],
    "description": "sys.exc_info"
  },
  "name = main": {
    "prefix": [
      "if_name_main",
      "if_main_name",
      "name_main",
      "main_name"
    ],
    "body": [
      "if __name__ == '__main__':",
      "    ${0:pass}"
    ],
    "description": [
      "If __name__ == __main__"
    ]
  },
  "try:except:": {
    "prefix": [
      "try",
      "try_except"
    ],
    "body": [
      "try:",
      "    ${1:pass}",
      "except ${2:Exception}${3: as e}:",
      "    ${0:pass}"
    ],
    "description": "try/except"
  },
  "pytest echo db": {
    "prefix": [
      "pytest_echo_db",
      "echo_db_pytest",
      "db_echo_pytest",
      "db_pytest_echo",
      "db_log_pytest_echo",
      "log_db_pytest_echo",
      "debug_db_pytest",
      "pytest_debug_db"
    ],
    "body": [
      "# TODO:kanmii: debug logging - MUST BE REMOVED !!!!!",
      "@pytest.fixture(autouse=True)",
      "def db_engine_echo___(db_engine):",
      "    db_engine.echo = True",
      "    # db_engine.echo = False"
    ],
    "description": [
      "pytest echo db"
    ]
  },
  "pytest skip": {
    "prefix": [
      "pytest_skip",
      "skip_pytest"
    ],
    "body": [
      "# $0import pytest",
      "@pytest.mark.skip${1:(reason=\"reason\")}"
    ],
    "description": [
      "pytest skip"
    ]
  },
  "pragma no cover": {
    "prefix": [
      "pragmaNoCover"
    ],
    "body": "  # pragma: no cover",
    "description": [
      "Pragma No Cover"
    ]
  },
  "pytest.mark.parametrize": {
    "prefix": [
      "pytest_parametrize",
      "parametrize_pytest"
    ],
    "body": [
      "@pytest.mark.parametrize(",
      "  argnames=(",
      "      \"a\",",
      "      \"b\",",
      "  ),",
      "  argvalues=(",
      "      pytest.param(",
      "          \"a\",",
      "          \"b\",",
      "          id=\"\",",
      "      ),",
      "  ),",
      ")"
    ],
    "description": [
      "pytest.mark.parametrize"
    ]
  },
  "type_alias": {
    "prefix": [
      "type_alias",
      "alias_type"
    ],
    "body": [
      "# <3.11",
      "# from typing import TypeAlias",
      "${1:type_name_var}: TypeAlias = ${2:list[float]}",
      "${1:type_name_var}: TypeAlias = \"${2:list[float, SomeClass]}\" # You need to surround with \"",
      "",
      "# >=3.11",
      "# from typing import TypeAlias",
      "# from typing_extensions import Self",
      "${1:type_name_var}: TypeAlias = ${2:list[float, Self]}",
      "",
      "# >=3.12",
      "type ${1:type_name_var} = ${2:tuple[float, Self]}"
    ],
    "description": [
      "type alias"
    ]
  },
  "Triple quote": {
    "prefix": [
      "triple_quote",
      "quote_triple",
      "quote_triple",
      "triple_quote"
    ],
    "body": [
      "\"\"\"$1",
      "$0",
      "\"\"\""
    ],
    "description": [
      "Triple quote"
    ]
  }
}
