{
  "setImmediate": {
    "prefix": "sim",
    "body": "setImmediate(() => {\n\t${0}\n})"
  },
  "await sleep": {
    "prefix": "ast",
    "body": "await new Promise((r) => setTimeout(r, ${0}))"
  },
  "Node callback": {
    "prefix": "cb",
    "body": "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"
  },
  "process.env": {
    "prefix": "pe",
    "body": "process.env"
  },
  "Promise.all": {
    "prefix": "pa",
    "body": "Promise.all(${1:value})"
  },
  "Promise.resolve": {
    "prefix": "prs",
    "body": "Promise.resolve(${1:value})"
  },
  "Promise.reject": {
    "prefix": "prj",
    "body": "Promise.reject(${1:value})"
  },
  "Promise": {
    "prefix": "p",
    "body": "Promise"
  },
  "new Promise": {
    "prefix": "np",
    "body": "new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "Promise.then": {
    "prefix": "pt",
    "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})"
  },
  "Promise.catch": {
    "prefix": "pc",
    "body": "${1:promise}.catch(error => {\n\t${0}\n})"
  },
  "describe": {
    "prefix": "desc",
    "body": "describe('${1:description}', () => {\n\t${0}\n})"
  },
  "describe top level": {
    "prefix": "dt",
    "body": "describe('${TM_FILENAME_BASE}', () => {\n\t${0}\n})"
  },
  "it asynchronous": {
    "prefix": "it",
    "body": "it('${1:description}', async () => {\n\t${0}\n})"
  },
  "it.todo": {
    "prefix": "itt",
    "body": "it.todo('${1:description}')"
  },
  "it with a callback": {
    "prefix": "itd",
    "body": "it('${1:description}', (done) => {\n\t${0}\n})"
  },
  "it synchronous": {
    "prefix": "its",
    "body": "it('${1:description}', () => {\n\t${0}\n})"
  },
  "before": {
    "prefix": "bf",
    "body": "before(async () => {\n\t${0}\n})"
  },
  "beforeAll": {
    "prefix": "ba",
    "body": "beforeAll(async () => {\n\t${0}\n})"
  },
  "beforeEach": {
    "prefix": "bfe",
    "body": "beforeEach(async () => {\n\t${0}\n})"
  },
  "after": {
    "prefix": "aft",
    "body": "after(() => {\n\t${0}\n})"
  },
  "afterEach": {
    "prefix": "afe",
    "body": "afterEach(() => {\n\t${0}\n})"
  },
  "require": {
    "prefix": "rq",
    "body": "require('${1:module}')"
  },
  "const module = require('module')": {
    "prefix": "cr",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "exports.member": {
    "prefix": "em",
    "body": "exports.${1:member} = ${2:value}"
  },
  "module.exports": {
    "prefix": "me",
    "body": "module.exports = ${1:name}"
  },
  "module as class": {
    "prefix": "mec",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}\n\nmodule.exports = ${1:name}\n"
  },
  "event handler": {
    "prefix": "on",
    "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n})"
  },
  "dom event cancel default and propagation": {
    "prefix": "evc",
    "body": "ev.preventDefault()\nev.stopPropagation()\nreturn false"
  },
  "addEventListener": {
    "prefix": "ae",
    "body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "rel",
    "body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
  },
  "getElementById": {
    "prefix": "gi",
    "body": "${1:document}.getElementById('${2:id}')"
  },
  "getElementsByClassName": {
    "prefix": "gc",
    "body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
  },
  "getElementsByTagName": {
    "prefix": "gt",
    "body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "createDocumentFragment": {
    "prefix": "cdf",
    "body": "${1:document}.createDocumentFragment(${2:elem})"
  },
  "createElement": {
    "prefix": "cel",
    "body": "${1:document}.createElement(${2:elem})"
  },
  "classList.add": {
    "prefix": "hecla",
    "body": "${1:el}.classList.add('${2:class}')"
  },
  "classList.remove": {
    "prefix": "heclr",
    "body": "${1:el}.classList.remove('${2:class}')"
  },
  "classList.toggle": {
    "prefix": "hect",
    "body": "${1:el}.classList.toggle('${2:class}')"
  },
  "getAttribute": {
    "prefix": "hega",
    "body": "${1:el}.getAttribute('${2:attr}')"
  },
  "removeAttribute": {
    "prefix": "hera",
    "body": "${1:el}.removeAttribute('${2:attr}')"
  },
  "setAttribute": {
    "prefix": "hesa",
    "body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
  },
  "appendChild": {
    "prefix": "heac",
    "body": "${1:el}.appendChild(${2:elem})"
  },
  "removeChild": {
    "prefix": "herc",
    "body": "${1:el}.removeChild(${2:elem})"
  },
  "forEach loop": {
    "prefix": "fe",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "const statement from destructuring": {
    "prefix": "cd",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "const statement from array destructuring": {
    "prefix": "cad",
    "body": "const [ ${2:prop} ] = ${1:value}"
  },
  "const assignment awaited": {
    "prefix": "ca",
    "body": "const ${1:name} = await ${2:value}"
  },
  "const destructuring assignment awaited": {
    "prefix": "cda",
    "body": "const { ${1:name} } = await ${2:value}"
  },
  "const arrow function assignment": {
    "prefix": "cf",
    "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
  },
  "let assignment awaited": {
    "prefix": "la",
    "body": "let ${1:name} = await ${2:value}"
  },
  "const assignment yielded": {
    "prefix": "cy",
    "body": "const ${1:name} = yield ${2:value}"
  },
  "let assignment yielded": {
    "prefix": "ly",
    "body": "let ${1:name} = yield ${2:value}"
  },
  "const object": {
    "prefix": "co",
    "body": "const ${1:name} = {\n\t${0}\n}"
  },
  "const array": {
    "prefix": "car",
    "body": "const ${1:name} = [\n\t${0}\n]"
  },
  "generate array of integers starting with 1": {
    "prefix": "gari",
    "body": "Array.from({ length: ${1:length} }, (v, k) => k + 1)"
  },
  "generate array of integers starting with 0": {
    "prefix": "gari0",
    "body": "[...Array(${1:length}).keys()]"
  },
  "class": {
    "prefix": "cs",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
  },
  "class extends": {
    "prefix": "csx",
    "body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
  },
  "module export": {
    "prefix": "e",
    "body": "export ${1:member}"
  },
  "module export const": {
    "prefix": "ec",
    "body": "export const ${1:member} = ${2:value}"
  },
  "export named function": {
    "prefix": "ef",
    "body": "export function ${1:member} (${2:arguments}) {\n\t${0}\n}"
  },
  "module default export": {
    "prefix": "ed",
    "body": "export default ${1:member}"
  },
  "module default export function": {
    "prefix": "edf",
    "body": "export default function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "import module": {
    "prefix": "im",
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module as": {
    "prefix": "ia",
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": "id",
    "body": "import {$2} from '${1:module}'"
  },
  "typeof": {
    "prefix": "to",
    "body": "typeof ${1:source} === '${2:undefined}'"
  },
  "this": {
    "prefix": "t",
    "body": "this."
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${2:Object}"
  },
  "let and if statement": {
    "prefix": "lif",
    "body": "let ${0} \n if (${2:condition}) {\n\t${1}\n}"
  },
  "else statement": {
    "prefix": "el",
    "body": "else {\n\t${0}\n}"
  },
  "else if statement": {
    "prefix": "ei",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "while iteration decrementing": {
    "prefix": "wid",
    "body": "let ${1:array}Index = ${1:array}.length\nwhile (${1:array}Index--) {\n\t${0}\n}"
  },
  "throw new Error": {
    "prefix": "tn",
    "body": "throw new ${0:error}"
  },
  "try/catch": {
    "prefix": "tc",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/finally": {
    "prefix": "tf",
    "body": "try {\n\t${0}\n} finally {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "anonymous function": {
    "prefix": "fan",
    "body": "function (${1:arguments}) {${0}}"
  },
  "named function": {
    "prefix": "fn",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "asf",
    "body": "async function (${1:arguments}) {\n\t${0}\n}"
  },
  "async arrow function": {
    "prefix": "aa",
    "body": "async (${1:arguments}) => {\n\t${0}\n}"
  },
  "async immediately-invoked function expression": {
    "prefix": "aiife",
    "body": ";(async (${1:arguments}) => {\n\t${0}\n})(${2})"
  },
  "arrow function": {
    "prefix": "af",
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "arrow function with destructuring": {
    "prefix": "fd",
    "body": "({${1:arguments}}) => ${2:statement}"
  },
  "arrow function with destructuring returning destructured": {
    "prefix": "fdr",
    "body": "({${1:arguments}}) => ${1:arguments}"
  },
  "arrow function with body": {
    "prefix": "f",
    "body": "(${1:arguments}) => {\n\t${0}\n}"
  },
  "arrow function with return": {
    "prefix": "fr",
    "body": "(${1:arguments}) => {\n\treturn ${0}\n}"
  },
  "generator function": {
    "prefix": "gf",
    "body": "function* (${1:arguments}) {\n\t${0}\n}"
  },
  "named generator": {
    "prefix": "gfn",
    "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}"
  },
  "console.log": {
    "prefix": "cl",
    "body": "console.log(${0})"
  },
  "console.log a variable": {
    "prefix": "cv",
    "body": "console.log('${0}:', ${0})"
  },
  "console.error": {
    "prefix": "ce",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn(${0})"
  },
  "console.dir": {
    "prefix": "cod",
    "body": "console.dir('${0}:', ${0})"
  },
  "constructor": {
    "prefix": "cn",
    "body": "constructor () {\n\t${0}\n}"
  },
  "use strict": {
    "prefix": "uss",
    "body": "'use strict'"
  },
  "JSON.stringify()": {
    "prefix": "js",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "jp",
    "body": "JSON.parse($0)"
  },
  "method": {
    "prefix": "m",
    "body": "${1:method} (${2:arguments}) {\n\t${0}\n}"
  },
  "getter": {
    "prefix": "get",
    "body": "get ${1:property} () {\n\t${0}\n}"
  },
  "setter": {
    "prefix": "set",
    "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
  },
  "getter + setter": {
    "prefix": "gs",
    "body": "get ${1:property} () {\n\t${0}\n}\nset ${1:property} (${2:value}) {\n\t\n}"
  },
  "prototype method": {
    "prefix": "proto",
    "body": "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n\t${0}\n}"
  },
  "Object.assign": {
    "prefix": "oa",
    "body": "Object.assign(${1:dest}, ${2:source})"
  },
  "Object.create": {
    "prefix": "oc",
    "body": "Object.create(${1:obj})"
  },
  "Object.getOwnPropertyDescriptor": {
    "prefix": "og",
    "body": "Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')"
  },
  "ternary": {
    "prefix": "te",
    "body": "${1:cond} ? ${2:true} : ${3:false}"
  },
  "ternary assignment": {
    "prefix": "ta",
    "body": "const ${0} = ${1:cond} ? ${2:true} : ${3:false}"
  },
  "Object.defineProperty": {
    "prefix": "od",
    "body": "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${0}\n})"
  },
  "Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${1:obj})"
  },
  "Object.values": {
    "prefix": "ov",
    "body": "Object.values(${1:obj})"
  },
  "Object.entries": {
    "prefix": "oe",
    "body": "Object.entries(${1:obj})"
  },
  "return": {
    "prefix": "r",
    "body": "return ${0}"
  },
  "return arrow function": {
    "prefix": "rf",
    "body": "return (${1:arguments}) => ${2:statement}"
  },
  "yield": {
    "prefix": "y",
    "body": "yield ${0}"
  },
  "return this": {
    "prefix": "rt",
    "body": "return ${0:this}"
  },
  "return null": {
    "prefix": "rn",
    "body": "return null"
  },
  "return new object": {
    "prefix": "ro",
    "body": "return {\n\t${0}\n}"
  },
  "return new array": {
    "prefix": "ra",
    "body": "return [\n\t${0}\n]"
  },
  "return promise": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "wrap selection in arrow function": {
    "prefix": "wrap selection in arrow function",
    "body": "() => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "wrap selection in async arrow function": {
    "prefix": "wrap selection in async arrow function",
    "body": "async () => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "define module": {
    "prefix": "define",
    "body": [
      "define([",
      "\t'require',",
      "\t'${1:dependency}'",
      "], function(require, ${2:factory}) {",
      "\t'use strict';",
      "\t$0",
      "});"
    ],
    "description": "define module"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "Set Interval Function"
  },
  "Import external module.": {
    "prefix": "import statement",
    "body": ["import { $0 } from \"${1:module}\";"],
    "description": "Import external module."
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["//#region $0"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["//#endregion"],
    "description": "Folding Region End"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": ["console.warn($1);", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": ["console.error($1);", "$0"],
    "description": "Log error to the console"
  },
  "Compare previous and current props": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "compareprops",
    "body": [
      "React.memo(",
      "  ${1:func},",
      "",
      "(a, b) => {",
      "  Object.entries(a).forEach(([k, v]) => {",
      "      if (v !== b[k]) {",
      "          console.log(",
      "              \"\\n  Logging start\\n\\n\\n\\n a !== b\\n\",",
      "              k,",
      "              \"\\n\",",
      "              v,",
      "              \"\\n\\n\",",
      "              b[k],",
      "              \"\\n\\n\\n\\n    Logging ends\\n\"",
      "          );",
      "      }",
      "  });",
      "",
      "      return false;",
      "  }",
      "",
      ");"
    ],
    "description": "Compare previous and current props"
  },
  "Export react functional Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "exportreactfunction",
    "body": [
      "import React from \"react\";",
      "",
      "export function ${1:Component}(props) {",
      "  return ${2:<div>1</div>};",
      "}"
    ],
    "description": "Export react functional Component"
  },
  "Print to console": {
    "prefix": "consoleapplog",
    "body": [
      "console.log(",
      "  `\\n\\n\\nSTART ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`,",
      "  `\\n>>>>>>>>>>>>>> $2 ${1:label1}\\n`, ${1:label1},",
      "  //$0 `\\n\\n>>>>>>>>>>>>>> label2\\n`, label2,",
      "  `\\nEND ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\\n\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },
  "Print to console error": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "consoleerrorlog",
    "body": [
      "console.log(",
      "  `\\n======================Logging start==================\\n",
      "      Label: ${1:label}$2",
      "  `,",
      "  new Error().stack,",
      "  `\\n\\n`,",
      "  ${1:code},",
      "  `\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },

  "actReactTest": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "actReactTest",
    "body": ["act(() => {", "  ${1}", "});"],
    "description": "actReactTest"
  },
  "console.log JSON.stringify": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "consolejsonlog",
    "body": [
      "console.log(",
      "  `\\n\\n\\nSTART ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++`,",
      "  `\\n>>>>>>>>>>>>>> $0 ${1:label1}\\n`,",
      "  JSON.stringify($1, null, 2),",
      "  `\\nEND ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\\n\\n`",
      ");"
    ],
    "description": "console.log JSON.stringify"
  },
  "describeTest": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "describeTest",
    "body": [
      "describe(\"${1:describe_label}\", () => {",
      "   it(\"${2:test_label}\", async () => {",
      "",
      "  })",
      "})"
    ],
    "description": "describe test jest"
  },
  "dom ready": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "domready",
    "body": [
      "function domRead() {}",
      "",
      "if (document.readyState !== \"loading\") {",
      "  console.log(\"loading\");",
      "",
      "  domRead();",
      "} else {",
      "  document.addEventListener(\"DOMContentLoaded\", domRead);",
      "  console.log(\"ready\");",
      "}"
    ],
    "description": "dom ready"
  },
  "eslint-disable": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eslint-disable",
    "body": "/* eslint-disable ${1} */",
    "description": "eslint disable"
  },
  "eslint-disable-next-line": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line ${1} */",
    "description": "eslint disable next line"
  },
  "jsdoc": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "jsdoc",
    "body": ["/**", "* $0", "*/"],
    "description": "JSDOC for function or variable"
  },

  "callback param JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "callbackparam",
    "body": [
      "/**",
      "* @callback ${1:NameYourType}",
      "* @param {${2:type}} ${3:paramName} ${4:description} ${6}",
      "* @returns {${5:returnType}}",
      "*/"
    ],
    "description": "JSDOC for callback"
  },
  "first object param of function first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectf",
    "body": [
      "/**",
      "* @param {Object} ${1:paramName}",
      "* @param {${2:type}} ${1:paramName}.${3:propertyName} ${4:description}",
      "*/"
    ],
    "description": "first object param of function first time JSDOC"
  },
  "function param first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["jsdoc-param", "param-jsdoc", "function-jsdoc"],
    "body": [
      "/**",
      "* @param {${1:type}} ${2:paramName} ${3:description}${5}",
      "* @returns {${4:returnType}}",
      "*/"
    ],
    "description": "function param first time JSDOC"
  },
  "function param next time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramn",
    "body": ["@param {${1:type}} ${2:paramName} ${3:description}"],
    "description": "function param next time JSDOC"
  },
  "function param object next time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectn",
    "body": [
      "@param {Object} ${1:paramName}",
      "* @param {${2:type}} ${1:paramName}.${3:propertyName} ${4:description}"
    ],
    "description": "function param object next time JSDOC"
  },
  "function param return JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramr",
    "body": ["@return {${1:returnType}}"],
    "description": "function param return JSDOC"
  },
  "next/addition object param of function JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectn",
    "body": [
      "@param {${1:type}} ${2:paramName}.${3:propertyName} ${4:description}"
    ],
    "description": "next/addition object param of function JSDOC"
  },
  "next/addition1 object param of function JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramobjectopt",
    "body": [
      "@param {${1:type}} ${2:paramName}.${3:propertyName} ${4:description}"
    ],
    "description": "next/addition object param of function JSDOC"
  },
  "typdef import first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefimport",
    "body": ["/**", "* @typedef { import('${1}').${2} } ${2} ${3}", "*/"],
    "description": "typdef import first time JSDOC"
  },
  "typdef import next time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefimportn",
    "body": ["* @typedef { import('${1}').${2} } ${2} ${3}"],
    "description": "typdef import next time JSDOC"
  },
  "typdef object first time JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefobject",
    "body": [
      "/**",
      "* @typedef {Object} ${1:NameYourType}",
      "* @property {${2:type}} ${3:propertyName} ${4:description}",
      "*/"
    ],
    "description": "typdef object first time JSDOC"
  },
  "typdef object next.additional property JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "typedefobjectn",
    "body": ["@property {${1:type}} ${2:propertyName} ${3:description}"],
    "description": "typdef object next.additional property JSDOC"
  },
  "typdef object optional property JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["type_def_object_optional", "optional_type_def_object"],
    "body": ["@property {${1:type}=} ${2:propertyName} ${3:description}"],
    "description": "typdef object optional property JSDOC"
  },
  "type assertion JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["type_assert_jsdoc", "jsdoc_assert_type"],
    "body": ["/** @type {${1:type}} */ (${2:variable_or_value})", "${3}"],
    "description": "type assertion JSDOC"
  },
  "type_var_description": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "jsdoc_type_var_description",
      "type_var_description_jsdoc",
      "var_type_description"
    ],
    "body": ["/**", "* ${1:description}", "* @type {${2:type}}", "*/", "${3}"],
    "description": "type variable declaration JSDOC with description"
  },
  "type_var": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["type_var_jsdoc", "jsdoc_type_var", "var_type_jsdoc"],
    "body": ["/**", "* @type {${2:type}}", "*/", "${3}"],
    "description": "type variable declaration JSDOC"
  },
  "optional function param JSDOC": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "paramopt",
    "body": ["@param {${1:type}=} ${2:paramName}"],
    "description": "optional function param JSDOC"
  },
  "graphql mutation tag": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "mutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "  mutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "      ${3:function_name}(input: $input) {",
      "",
      "      }",
      "  }",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },
  "graphql mutation tag1": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "graphqlmutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "  mutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "      ${3:function_name}(input: $input) {",
      "",
      "      }",
      "  }",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },
  "helper funcs": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "helperfuncs",
    "body": [
      "// ====================================================",
      "// START ${1}",
      "// ====================================================",
      "// ${2}",
      "// ====================================================",
      "// END ${1}",
      "// ===================================================="
    ],
    "description": "Helper functions header"
  },
  "immediately invoked function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "iife",
    "body": ["( function ${1:funName}(){", "  ${2}", "})();"],
    "description": "immediately invoked function expression"
  },
  "istanbul ignore else": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istanbulelse",
    "body": ["// istanbul ignore else:"],
    "description": "istanbul ignore else"
  },
  "istanbul ignore next": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istanbulnext",
    "body": ["// istanbul ignore next:"],
    "description": "istanbul ignore next"
  },
  "istanbul ignore file": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "istanbulfile",
    "body": ["/* istanbul ignore file */", ""],
    "description": "istanbul ignore next"
  },
  "new promise": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "newpromise",
    "body": ["new Promise((resolve, reject) => {", "${1}", "})"],
    "description": "new promise"
  },
  "object define property": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "objectdefineProperty",
    "body": [
      "Object.defineProperty(",
      "${1:object},",
      "'${2:property}',",
      "{",
      "  get : function $1_$2_getter() {",
      "    // getter code",
      "  },",
      "  set : function $1_$2_setter(value) {",
      "    // setter code",
      "  },",
      "  value        : ${3:value},",
      "  writable    : ${4:boolean},",
      "  enumerable   : ${5:boolean},",
      "  configurable : ${0:boolean}",
      "}",
      ");"
    ],
    "description": "object define property"
  },
  "react test": {
    "scope": "javascript,javascriptreact,typescriptreact",
    "prefix": "reacttest-file",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import \"@testing-library/jest-dom\";",
      "import { cleanup, render } from \"@testing-library/react\";",
      "import React, { ComponentType } from \"react\";",
      "import { act } from \"react-dom/test-utils\";",
      "import { ${1:Component} } from \"../${1:Component}\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "  jest.clearAllMocks();",
      "});",
      "",
      "describe(\"components\", () => {",
      "  it(\"test_name\", async () => {",
      "      const { ui } = makeComp();",
      "",
      "      await act(async () => {",
      "          // when app renders",
      "          // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "          const { debug } = render(ui);",
      "          $0",
      "          // import { cleanup, fireEvent, render, waitFor } from \"@testing-library/react\";",
      "          //await waitFor(() => {",
      "          // expect(1).not.toBeNull()",
      "          //});",
      "      });",
      "  });",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<Props>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<Props> } = {}) {",
      "  return {",
      "      ui: <${1:Component}P {...props} />,",
      "  };",
      "}",
      "",
      "type Props = {};"
    ],
    "description": "react test"
  },
  "svelte test": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "sveltetest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, wait } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "  render(${1}, {",
      "      segment: \"\"",
      "  });",
      "",
      "  await wait(() => true);",
      "});"
    ],
    "description": "svelte test"
  },
  "ternary operation": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ter",
    "body": ["${1:condition} ? ${2:truthy} : ${0:falsy}"],
    "description": "ternary operation"
  },
  "test react": {
    "scope": "javascript,javascriptreact,typescriptreact",
    "prefix": "testreact-file",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import \"@testing-library/jest-dom\";",
      "import { cleanup, render } from \"@testing-library/react\";",
      "import React, { ComponentType } from \"react\";",
      "import { act } from \"react-dom/test-utils\";",
      "import { ${1:Component} } from \"../${1:Component}\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "  jest.clearAllMocks();",
      "});",
      "",
      "describe(\"components\", () => {",
      "  it(\"test_name\", async () => {",
      "      const { ui } = makeComp();",
      "",
      "      await act(async () => {",
      "          // when app renders",
      "          // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "          const { debug } = render(ui);",
      "          $0",
      "          // import { cleanup, fireEvent, render, waitFor } from \"@testing-library/react\";",
      "          //await waitFor(() => {",
      "          // expect(1).not.toBeNull()",
      "          //});",
      "      });",
      "  });",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<Props>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<Props> } = {}) {",
      "  return {",
      "      ui: <${1:Component}P {...props} />,",
      "  };",
      "}",
      "",
      "type Props = {};"
    ],
    "description": "test react"
  },
  "test react test": {
    "prefix": "testreact-test",
    "body": [
      "it(\"${1:test_name}\", async () => {",
      "",
      "  // import { act } from \"react-dom/test-utils\";",
      "  await act(async () => {",
      "      // when app renders",
      "      // eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "      const { debug } = render(${2:app_name});",
      "",
      "      // import \"@testing-library/jest-dom\";",
      "      // import { cleanup, fireEvent, render, waitFor } from \"@testing-library/react\";",
      "      //await waitFor(() => {",
      "          // expect().not.toBeNull()",
      "      //});",
      "  });",
      "});"
    ],
    "description": "test react test"
  },
  "test svelte": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "testsvelte",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, wait } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "  render(${1}, {",
      "    segment: \"\"",
      "  });",
      "",
      "  await wait(() => true);",
      "});"
    ],
    "description": "test svelte"
  },
  "useEffect react": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useEffectReact",
    "body": ["useEffect(() => { ${2} }, [${1}])"],
    "description": "useEffect react"
  },
  "ts-ignore": {
    "scope": "javascript,javascriptreact",
    "prefix": "tsignore",
    "body": ["// @ts-ignore"],
    "description": "ts-ignore"
  },
  "ts-nocheck": {
    "scope": "javascript,javascriptreact",
    "prefix": "tsnocheck",
    "body": ["// @ts-nocheck"],
    "description": "ts-nocheck"
  },
  "Reducer definition": {
    "scope": "typescript,typescriptreact",
    "prefix": "reducer_definition",
    "body": [
      "export function reducer(prevState: StateMachine, actionToApply: Action) {",
      "  return wrapStateMachineForLogging<StateMachine, Action>(",
      "      prevState,",
      "      actionToApply,",
      "      (state, action) => {",
      "          state.effects = [];",
      "          const { type, ...payload } = action;",
      "",
      "          switch (type) {",
      "              case ActionType.action:",
      "                  handleSomeAction(state, payload as Any);",
      "                  break;",
      "          }",
      "",
      "          return state;",
      "      }",
      "  );",
      "}"
    ],
    "description": "Reducer definition"
  },
  "StateMachine definition": {
    "prefix": "statemachine_definition",
    "body": [
      "import { Effects, GenericEffectDefinition } from \"@/effects\";",
      "import { wrapStateMachineForLogging } from \"@/logger\";",
      "import { Any } from \"@/globals\";",
      "",
      "export enum ActionType {",
      "  action = \"action\",",
      "}",
      "",
      "export function initState() {",
      "  const state: StateMachine = {",
      "      id: \"some-state\",",
      "      effects: [],",
      "  };",
      "",
      "  return wrapStateMachineForLogging(state);",
      "}",
      "",
      "export function reducer(prevState: StateMachine, actionToApply: Action) {",
      "  return wrapStateMachineForLogging<StateMachine, Action>(",
      "      prevState,",
      "      actionToApply,",
      "      (state, action) => {",
      "          state.effects = [];",
      "          const { type, ...payload } = action;",
      "",
      "          switch (type) {",
      "              case ActionType.action:",
      "                  handleSomeAction(state, payload as UpdatePayload);",
      "                  break;",
      "          }",
      "",
      "          return state;",
      "      }",
      "  );",
      "}",
      "",
      "function handleSomeAction(",
      "  state: StateMachine,",
      "  payload: UpdatePayload",
      ") {",
      "  console.log(state, payload)",
      "}",
      "",
      "//// EFFECTS",
      "",
      "const someEffect: SomeEffectDef[\"func\"] = async (form, effectArgs) => {",
      "  const { dispatch } = effectArgs;",
      "  console.log(form, dispatch);",
      "};",
      "",
      "type SomeEffectDef = EffectDefinition<",
      "  \"someEffect\",",
      "  Form",
      ">;",
      "",
      "export const effectFunctions = {",
      "  someEffect,",
      "};",
      "",
      "//// END EFFECTS",
      "",
      "type StateMachine = {",
      "  id: string;",
      "  effects: Effects<EffectType>;",
      "};",
      "",
      "type Form = {",
      "  name: string;",
      "};",
      "",
      "export type Action =",
      "  | {",
      "          type: ActionType.action;",
      "      } & UpdatePayload;",
      "",
      "type UpdatePayload = {",
      "  data: string;",
      "};",
      "",
      "type DispatchType = (action: Action) => void;",
      "",
      "type EffectArgs = {",
      "  dispatch: DispatchType;",
      "};",
      "",
      "type EffectType = SomeEffectDef;",
      "",
      "type EffectDefinition<",
      "  FunctionName extends keyof typeof effectFunctions,",
      "  OwnArgs = Any",
      "> = GenericEffectDefinition<EffectArgs, FunctionName, OwnArgs>;"
    ],
    "description": "StateMachine definition"
  }
}
