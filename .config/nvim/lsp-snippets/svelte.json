{
  /*
		// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/

  "Print to console": {
    "prefix": "consolelogapplog",
    "body": [
      "console.log(",
      "\t`\\n======================Logging start==================\\n",
      "\t\t\tLabel: ${1:label}",
      "\t`,",
      "\t${1:code},",
      "\t`\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },

  "Print to console error": {
    "prefix": "consolelogapplogerror",
    "body": [
      "console.log(",
      "\t`\\n======================Logging start==================\\n",
      "\t\t\tLabel: ${1:label}",
      "\t`,",
      "\tnew Error().stack,",
      "\t`\\n\\n`,",
      "\t${1:code},",
      "\t`\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },

  "console.log JSON.stringify": {
    "prefix": "consolelogjson",
    "body": [
      "console.log(",
      "\t`\\n======================Logging start==================\\n",
      "\t\t\tLabel: ${1:label}",
      "\t`,",
      "\tJSON.stringify(${1:code}, null, 2),",
      "\t`\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "console.log JSON.stringify"
  },

  "const function": {
    "prefix": "constantfunc",
    "body": [
      "const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}"
    ]
  },

  "export const function": {
    "prefix": "exportconstantfunc",
    "body": [
      "export const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}"
    ]
  },

  "export default const function": {
    "prefix": "exportdefaultconstantfunc",
    "body": [
      "export const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}",
      "\n",
      "\n",
      "export default ${1:funcName}"
    ]
  },

  "export constant": {
    "prefix": "exportconstant",
    "body": "export const ${1:name} = $0"
  },

  "export default constant": {
    "prefix": "exportdefaultconstant",
    "body": [
      "export const ${1:name}: ${2:type} = $0",
      "\n",
      "\n",
      "export default ${1:name}"
    ]
  },

  "istanbul ignore next": {
    "prefix": "istanbulignore",
    "body": ["// istanbul ignore next:"],
    "description": "istanbul ignore next"
  },

  "immediately invoked function expression": {
    "prefix": "iife",
    "body": ["( function ${1:funName}(){", "\t${2}", "})();"],
    "description": "immediately invoked function expression"
  },

  "eslint-disable-next-line": {
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line ${1} */",
    "description": "eslint disable next line"
  },

  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": "/* eslint-disable ${1} */",
    "description": "eslint disable"
  },

  "helper funcs": {
    "prefix": "helperfuncs",
    "body": [
      "// ====================================================",
      "// ${1}",
      "// ====================================================",
      "",
      "",
      "${2}"
    ],
    "description": "Helper functions header"
  }
}
