{
  /*
		// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/
  "export default const function": {
    "prefix": "exportdefaultconstantfunc",
    "body": [
      "export const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}",
      "\n",
      "\n",
      "export default ${1:funcName}"
    ]
  },

  "export constant": {
    "prefix": "exportconstant",
    "body": "export const ${1:name} = $0"
  },

  "export default constant": {
    "prefix": "exportdefaultconstant",
    "body": [
      "export const ${1:name}: ${2:type} = $0",
      "\n",
      "\n",
      "export default ${1:name}"
    ]
  },

  "test react": {
    "prefix": "testreact",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "/* eslint-disable @typescript-eslint/no-unused-vars*/",
      "import React, { ComponentType } from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"../components/${1:Component}/\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "});",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp();",
      "\texpect(1).toBe(1)",
      "\trender(ui);",
      "});",
      "",
      "// HELPER FUNCTIONS /////////////////////////////////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<{}>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<{}> } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component}P {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },

  "react test": {
    "prefix": "reacttest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "/* eslint-disable @typescript-eslint/no-unused-vars*/",
      "import React, { ComponentType } from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"../components/${1:Component}/\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "});",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp();",
      "\texpect(1).toBe(1)",
      "\trender(ui);",
      "});",
      "",
      "// HELPER FUNCTIONS /////////////////////////////////////////////////////",
      "",
      "const ${1:Component}P = ${1:Component} as ComponentType<Partial<{}>>;",
      "",
      "function makeComp({ props = {} }: { props?: Partial<{}> } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component}P {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },

  "Compare previous and current props": {
    "prefix": "compareprops",
    "body": [
      "React.memo(",
      "\t${1:func},",
      "",
      "(a, b) => {",
      "\t\t\tObject.entries(a).forEach(([k, v]) => {",
      "\t\t\t\t\tif (v !== b[k]) {",
      "\t\t\t\t\t\t\tconsole.log(",
      "\t\t\t\t\t\t\t\t\t\"\\n\\t\\tLogging start\\n\\n\\n\\n a !== b\\n\",",
      "\t\t\t\t\t\t\t\t\tk,",
      "\t\t\t\t\t\t\t\t\t\"\\n\",",
      "\t\t\t\t\t\t\t\t\tv,",
      "\t\t\t\t\t\t\t\t\t\"\\n\\n\",",
      "\t\t\t\t\t\t\t\t\tb[k],",
      "\t\t\t\t\t\t\t\t\t\"\\n\\n\\n\\n\\t\\tLogging ends\\n\"",
      "\t\t\t\t\t\t\t);",
      "\t\t\t\t\t}",
      "\t\t\t});",
      "",
      "\t\t\treturn false;",
      "\t}",
      "",
      ");"
    ],
    "description": "Compare previous and current props"
  },

  "Export react functional Component": {
    "prefix": "exportreactfunction",
    "body": [
      "import React from \"react\";",
      "",
      "export function ${1:Component}(props: {}) {",
      "\treturn ${2:<div>1</div>};",
      "}"
    ],
    "description": "Export react functional Component"
  },

  "immediately invoked function expression": {
    "prefix": "iife",
    "body": ["( function ${1:funName}(){", "\t${2}", "})();"],
    "description": "immediately invoked function expression"
  },

  "eslint-disable-next-line": {
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line ${1}*/",
    "description": "eslint disable next line"
  },

  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": "/* eslint-disable ${1}*/",
    "description": "eslint disable"
  },

  "graphql mutation tag": {
    "prefix": "mutationtag",
    "body": [
      "\/\/ import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "\tmutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "\t\t\t${3:function_name}(input: $input) {",
      "",
      "\t\t\t}",
      "\t}",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },

  "graphql mutation tag1": {
    "prefix": "graphqlmutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "\tmutation ${2:mutation_name}(\\\\$input: ${2:mutation_name}Input!) {",
      "\t\t\t${3:function_name}(input: \\\\$input) {",
      "",
      "\t\t\t}",
      "\t}",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },

  "use mutation function typings": {
    "prefix": "usemutationfunctiontypings",
    "body": [
      "/*",
      "import {",
      "\tuseMutation,",
      "} from \"@apollo/react-hooks\";",
      "",
      "import {",
      "\tMutationFunction,",
      "\tMutationFunctionOptions,",
      "\tMutationResult,",
      "\tExecutionResult,",
      "} from \"@apollo/react-common\";",
      "*/",
      "import {",
      "\tuseMutation,",
      "\tMutationFunction,",
      "\tMutationFunctionOptions,",
      "\tMutationResult,",
      "} from \"react-apollo\";",
      "import {",
      "\t${1:mutation_name},",
      "\t${1:mutation_name}Variables,",
      "} from \"../apollo-types/${1:mutation_name}\";",
      "",
      "export function use${1:mutation_name}Mutation(): Use${1:mutation_name}Mutation {",
      "\treturn useMutation(${2:MUTATION_GQL_TAG_NAME});",
      "}",
      "",
      "export type ${1:mutation_name}MutationFn = MutationFunction<",
      "\t${1:mutation_name},",
      "\t${1:mutation_name}Variables",
      ">;",
      "",
      "// used to type check test fake mutation function return value e.g. {data: {result: {}}}",
      "export type ${1:mutation_name}MutationResult = ExecutionResult< ${1:mutation_name} >;",
      "",
      "// used to type check test fake function calls arguments",
      "export type ${1:mutation_name}MutationFnOptions = MutationFunctionOptions<",
      "\t${1:mutation_name},",
      "\t${1:mutation_name}Variables",
      ">;",
      "",
      "export type Use${1:mutation_name}Mutation = [",
      "\t${1:mutation_name}MutationFn,",
      "\tMutationResult<${1:mutation_name}>,",
      "];",
      "",
      "// component's props should extend this",
      "export interface ${1:mutation_name}ComponentProps {",
      "\t${3:mutation_function_name}: ${1:mutation_name}MutationFn;",
      "};"
    ],
    "description": "use mutation function typings"
  },

  "reducer function wrapped": {
    "prefix": "reducerfunctionwrapped",
    "body": [
      "import { Reducer } from \"react\";",
      "import { wrapReducer } from \"../../logger\";",
      "import immer from \"immer\";",
      "",
      "export const reducer: Reducer<StateMachine, Action> = (state, action) =>",
      "\twrapReducer(",
      "\t\t\tstate,",
      "\t\t\taction,",
      "\t\t\t(prevState, { type, ...payload }) => {",
      "\t\t\t\t\treturn immer(prevState, proxy => {",
      "\t\t\t\t\t\t\tswitch (type) {",
      "\t\t\t\t\t\t\t\t\tcase ActionType.CLOSE:",
      "\t\t\t\t\t\t\t\t\t\t\t{",
      "\t\t\t\t\t\t\t\t\t\t\t\t\tproxy.value = \"closed\";",
      "\t\t\t\t\t\t\t\t\t\t\t}",
      "",
      "\t\t\t\t\t\t\t\t\t\t\tbreak;",
      "\t\t\t\t\t\t\t}",
      "\t\t\t\t\t});",
      "\t\t\t},",
      "\t\t\t//  true,",
      "\t);",
      ""
    ],
    "description": "reducer function wrapped"
  },

  "svelte test": {
    "prefix": "sveltetest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, waitFor } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "\trender(${1}, {",
      "\t\t\tsegment: \"\"",
      "\t});",
      "",
      "\tawait waitFor(() => true);",
      "});"
    ],
    "description": "svelte test"
  },

  "test svelte": {
    "prefix": "testsvelte",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, waitFor } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "\trender(${1}, {",
      "\t\t\tsegment: \"\"",
      "\t});",
      "",
      "\tawait waitFor(() => true);",
      "});"
    ],
    "description": "test svelte"
  },

  "reducer effect definition": {
    "prefix": "reducereffectdefinition",
    "body": [
      "export const StateValue = {",
      "\teffectValNoEffect: \"noEffect\" as EffectValueNoEffect,",
      "\teffectValHasEffects: \"hasEffects\" as EffectValueHasEffects,",
      "};",
      "",
      "",
      "export enum ActionType {",
      "\tPUT_EFFECT_FUNCTIONS_ARGS = \"@/put-effects-functions-args\",",
      "}",
      "",
      "",
      "export const effectFunctions = {",
      "};",
      "",
      "",
      "function handlePutEffectFunctionsArgs(",
      "\tglobalState: StateMachine,",
      "\tpayload: EffectFunctionsArgs,",
      ") {",
      "\tglobalState.effects.context.effectsArgsObj = payload;",
      "}",
      "",
      "",
      "function prepareToAddRunOnRendersEffects(globalState: StateMachine) {",
      "\tconst runOnRendersEffects = globalState.effects.runOnRenders as EffectState;",
      "\trunOnRendersEffects.value = StateValue.effectValHasEffects;",
      "\tconst effectObjects: EffectObject = [];",
      "\tconst cleanupEffectObjects: EffectObject = [];",
      "\trunOnRendersEffects.hasEffects = {",
      "\t\t\tcontext: {",
      "\t\t\t\t\teffects: effectObjects,",
      "\t\t\t\t\tcleanupEffects: cleanupEffectObjects,",
      "\t\t\t},",
      "\t};",
      "",
      "\treturn [effectObjects, cleanupEffectObjects];",
      "}",
      "",
      "export function runEffects(",
      "\teffects: EffectObject,",
      "\teffectsArgsObj: EffectFunctionsArgs,",
      ") {",
      "\tfor (const { key, ownArgs, effectArgKeys } of effects) {",
      "\t\t\tconst effectArgs = getEffectArgsFromKeys(",
      "\t\t\t\t\teffectArgKeys as (keyof EffectFunctionsArgs)[],",
      "\t\t\t\t\teffectsArgsObj,",
      "\t\t\t);",
      "",
      "\t\t\teffectFunctions[key](",
      "\t\t\t\t\teffectArgs,",
      "\t\t\t\t\t/* eslint-disable-next-line @typescript-eslint/no-explicit-any*/",
      "\t\t\t\t\townArgs as any,",
      "\t\t\t);",
      "\t}",
      "}",
      "",
      "export function getEffectArgsFromKeys(",
      "\teffectArgKeys: (keyof EffectFunctionsArgs)[],",
      "\teffectsArgsObj: EffectFunctionsArgs,",
      ") {",
      "\treturn effectArgKeys.reduce(",
      "\t\t\t(acc, k) => {",
      "\t\t\t\t\tacc[k] = effectsArgsObj[k];",
      "\t\t\t\t\treturn acc;",
      "\t\t\t},",
      "\t\t\t{} as EffectFunctionsArgs,",
      "\t);",
      "}",
      "",
      "export interface StateMachine {",
      "",
      "\treadonly effects: ({",
      "\t\t\trunOnRenders: EffectState | { value: EffectValueNoEffect };",
      "\t\t\trunOnce: {",
      "\t\t\t\t\texample?: RunOnceExampleState;",
      "\t\t\t};",
      "\t}) & {",
      "\t\t\tcontext: EffectContext;",
      "\t};",
      "}",
      "",
      "",
      "interface RunOnceEffectState<IEffect> {",
      "\trun: boolean;",
      "\teffect: IEffect;",
      "}",
      "",
      "",
      "type EffectValueNoEffect = \"noEffect\";",
      "type EffectValueHasEffects = \"hasEffects\";",
      "",
      "interface EffectContext {",
      "\teffectsArgsObj: EffectFunctionsArgs;",
      "}",
      "",
      "type EffectObject = ()[];",
      "",
      "interface EffectState {",
      "\tvalue: EffectValueHasEffects;",
      "\thasEffects: {",
      "\t\t\tcontext: {",
      "\t\t\t\t\teffects: EffectObject;",
      "\t\t\t\t\tcleanupEffects: EffectObject;",
      "\t\t\t};",
      "\t};",
      "}",
      "",
      "export interface EffectFunctionsArgs {",
      "\ta: string;",
      "}",
      "",
      "interface EffectDefinition<",
      "\tKey extends keyof typeof effectFunctions,",
      "\tEffectArgKeys extends keyof EffectFunctionsArgs,",
      "\tOwnArgs = {}",
      "> {",
      "\tkey: Key;",
      "\teffectArgKeys: EffectArgKeys[];",
      "\townArgs: OwnArgs;",
      "\tfunc?: (",
      "\t\t\teffectArgs: { [k in EffectArgKeys]: EffectFunctionsArgs[k] },",
      "\t\t\townArgs: OwnArgs,",
      "\t) => void | Promise<void | (() => void)> | (() => void);",
      "}",
      "",
      "",
      "export type Action = {",
      "\t\t\t\t\ttype: ActionType.PUT_EFFECT_FUNCTIONS_ARGS;",
      "\t\t\t} & EffectFunctionsArgs;"
    ],
    "description": "reducer effect definition"
  },

  "state update effect definition": {
    "prefix": "stateupdateeffectdefinition",
    "body": [
      "export const StateValue = {",
      "\teffectValNoEffect: \"noEffect\" as EffectValueNoEffect,",
      "\teffectValHasEffects: \"hasEffects\" as EffectValueHasEffects,",
      "};",
      "",
      "",
      "export enum ActionType {",
      "\tPUT_EFFECT_FUNCTIONS_ARGS = \"@/put-effects-functions-args\",",
      "}",
      "",
      "",
      "export const effectFunctions = {",
      "};",
      "",
      "",
      "function handlePutEffectFunctionsArgs(",
      "\tglobalState: StateMachine,",
      "\tpayload: EffectFunctionsArgs,",
      ") {",
      "\tglobalState.effects.context.effectsArgsObj = payload;",
      "}",
      "",
      "",
      "function prepareToAddRunOnRendersEffects(globalState: StateMachine) {",
      "\tconst runOnRendersEffects = globalState.effects.runOnRenders as EffectState;",
      "\trunOnRendersEffects.value = StateValue.effectValHasEffects;",
      "\tconst effectObjects: EffectObject = [];",
      "\tconst cleanupEffectObjects: EffectObject = [];",
      "\trunOnRendersEffects.hasEffects = {",
      "\t\t\tcontext: {",
      "\t\t\t\t\teffects: effectObjects,",
      "\t\t\t\t\tcleanupEffects: cleanupEffectObjects,",
      "\t\t\t},",
      "\t};",
      "",
      "\treturn [effectObjects, cleanupEffectObjects];",
      "}",
      "",
      "export function runEffects(",
      "\teffects: EffectObject,",
      "\teffectsArgsObj: EffectFunctionsArgs,",
      ") {",
      "\tfor (const { key, ownArgs, effectArgKeys } of effects) {",
      "\t\t\tconst effectArgs = getEffectArgsFromKeys(",
      "\t\t\t\t\teffectArgKeys as (keyof EffectFunctionsArgs)[],",
      "\t\t\t\t\teffectsArgsObj,",
      "\t\t\t);",
      "",
      "\t\t\teffectFunctions[key](",
      "\t\t\t\t\teffectArgs,",
      "\t\t\t\t\t/* eslint-disable-next-line @typescript-eslint/no-explicit-any*/",
      "\t\t\t\t\townArgs as any,",
      "\t\t\t);",
      "\t}",
      "}",
      "",
      "export function getEffectArgsFromKeys(",
      "\teffectArgKeys: (keyof EffectFunctionsArgs)[],",
      "\teffectsArgsObj: EffectFunctionsArgs,",
      ") {",
      "\treturn effectArgKeys.reduce(",
      "\t\t\t(acc, k) => {",
      "\t\t\t\t\tacc[k] = effectsArgsObj[k];",
      "\t\t\t\t\treturn acc;",
      "\t\t\t},",
      "\t\t\t{} as EffectFunctionsArgs,",
      "\t);",
      "}",
      "",
      "export interface StateMachine {",
      "",
      "\treadonly effects: ({",
      "\t\t\trunOnRenders: EffectState | { value: EffectValueNoEffect };",
      "\t\t\trunOnce: {",
      "\t\t\t\t\texample?: RunOnceExampleState;",
      "\t\t\t};",
      "\t}) & {",
      "\t\t\tcontext: EffectContext;",
      "\t};",
      "}",
      "",
      "",
      "interface RunOnceEffectState<IEffect> {",
      "\trun: boolean;",
      "\teffect: IEffect;",
      "}",
      "",
      "",
      "type EffectValueNoEffect = \"noEffect\";",
      "type EffectValueHasEffects = \"hasEffects\";",
      "",
      "interface EffectContext {",
      "\teffectsArgsObj: EffectFunctionsArgs;",
      "}",
      "",
      "type EffectObject = ()[];",
      "",
      "interface EffectState {",
      "\tvalue: EffectValueHasEffects;",
      "\thasEffects: {",
      "\t\t\tcontext: {",
      "\t\t\t\t\teffects: EffectObject;",
      "\t\t\t\t\tcleanupEffects: EffectObject;",
      "\t\t\t};",
      "\t};",
      "}",
      "",
      "export interface EffectFunctionsArgs {",
      "\ta: string;",
      "}",
      "",
      "interface EffectDefinition<",
      "\tKey extends keyof typeof effectFunctions,",
      "\tEffectArgKeys extends keyof EffectFunctionsArgs,",
      "\tOwnArgs = {}",
      "> {",
      "\tkey: Key;",
      "\teffectArgKeys: EffectArgKeys[];",
      "\townArgs: OwnArgs;",
      "\tfunc?: (",
      "\t\t\teffectArgs: { [k in EffectArgKeys]: EffectFunctionsArgs[k] },",
      "\t\t\townArgs: OwnArgs,",
      "\t) => void | Promise<void | (() => void)> | (() => void);",
      "}",
      "",
      "",
      "export type Action = {",
      "\t\t\t\t\ttype: ActionType.PUT_EFFECT_FUNCTIONS_ARGS;",
      "\t\t\t} & EffectFunctionsArgs;"
    ],
    "description": "state update effect definition"
  },

  "effect function definition": {
    "prefix": "effectfunctiondefinition",
    "body": [
      "globalState.effects.context.effectsArgsObj = payload;",
      "const [effectObjects] = prepareToAddRunOnRendersEffects(globalState);",
      "",
      "effectObjects.push({",
      "\tkey: \"${1:function_name}\",",
      "\townArgs: {},",
      "\teffectArgKeys: [",
      "\t\t\t\"arg1\",",
      "\t],",
      "});",
      "",
      "globalState.effects.runOnce.runOnceExample = {",
      "\trun: true,",
      "\teffect: {",
      "\t\t\tkey: \"runOnceExample\",",
      "\t\t\townArgs: {},",
      "\t\t\teffectArgKeys: [\"arg1\"],",
      "\t},",
      "};",
      "",
      "",
      "const ${1:function_name}Effect: ${2:TypeName}Effect[\"func\"] = async ({",
      "\targ1",
      "}) => {",
      "\treturn () => {",
      "\t\t\treturn arg1;",
      "\t}",
      "};",
      "",
      "type ${2:TypeName}Effect = EffectDefinition<",
      "\t\"${1:function_name}\",",
      "\t\"arg1\"",
      ">;"
    ],
    "description": "effect function definition"
  },

  "effect useEffect definition": {
    "prefix": "effectuseeffect",
    "body": [
      "const {",
      "\teffects: {",
      "\t\t\trunOnRenders,",
      "\t\t\tcontext: { effectsArgsObj },",
      "\t\t\trunOnce: { runOnceExample },",
      "\t},",
      "} = stateMachine;",
      "",
      "",
      "const runRunOnceExample =",
      "\trunOnceExample && runOnceExample.run;",
      "",
      "useEffect(() => {",
      "\tif (runOnRenders.value !== StateValue.effectValHasEffects) {",
      "\t\t\treturn;",
      "\t}",
      "",
      "\tconst {",
      "\t\t\thasEffects: { context },",
      "\t} = runOnRenders;",
      "",
      "\trunEffects(context.effects, effectsArgsObj);",
      "",
      "\tconst { cleanupEffects } = context;",
      "",
      "\tif (cleanupEffects.length) {",
      "\t\t\treturn () => {",
      "\t\t\t\t\trunEffects(cleanupEffects, effectsArgsObj);",
      "\t\t\t};",
      "\t}",
      "",
      "\t// redundant - [tsserver 7030] [W] Not all code paths return a value.",
      "\treturn;",
      "",
      "\t/* eslint-disable-next-line react-hooks/exhaustive-deps*/",
      "}, [runOnRenders]);",
      "",
      "useEffect(() => {",
      "\t\tif (runRunOnceExample) {",
      "\t\t\t\tconst {",
      "\t\t\t\t\t\teffect: { key, effectArgKeys, ownArgs },",
      "\t\t\t\t} = runOnceExample as RunOnceExampleState;",
      "",
      "\t\t\t\tconst args = getEffectArgsFromKeys(effectArgKeys, effectsArgsObj);",
      "",
      "\t\t\t\treturn effectFunctions[key](",
      "\t\t\t\t\t\targs,",
      "\t\t\t\t\t\t/* eslint-disable-next-line @typescript-eslint/no-explicit-any*/",
      "\t\t\t\t\t\townArgs as any,",
      "\t\t\t\t) as (() => void);",
      "\t\t}",
      "",
      "\t// redundant - [tsserver 7030] [W] Not all code paths return a value.",
      "\t\treturn;",
      "",
      "\t\t/* eslint-disable-next-line react-hooks/exhaustive-deps*/",
      "}, [runRunOnceExample]);"
    ],
    "description": "effect useEffect definition"
  },

  "nonEmptyArray": {
    "prefix": "nonEmptyArray",
    "body": [
      "export type NonEmptyArray<T> = [T, ...T[]];",
      "",
      "// a user-defined type guard",
      "export function isNonEmptyArray<T>(arr: T[]): arr is NonEmptyArray<T> {",
      "\t\t\treturn arr.length > 0;",
      "}"
    ],
    "description": "nonEmptyArray"
  },

  "actReactTest": {
    "prefix": "actReactTest",
    "body": ["act(() => {", "\t${1}", "});"],
    "description": "actReactTest"
  },

  "describeTest": {
    "prefix": "describeTest",
    "body": [
      "describe(\"${1:describe_label}\", () => {",
      "\ttest(\"${2:test_label}\", () => {",
      "",
      "\t})",
      "})"
    ],
    "description": "describe test jest"
  },

  "@jest-environment jest-environment-jsdom-sixteen": {
    "prefix": "jsdomenvsixteen",
    "body": ["/**", "* @jest-environment jest-environment-jsdom-sixteen", "*/"],
    "description": "@jest-environment jest-environment-jsdom-sixteen"
  }
}
