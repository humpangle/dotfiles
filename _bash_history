#!/usr/bin/env bash
# shellcheck disable=2034,2209,2135,2155,2139,2086,1090
# vim:ft=bash

# https://unix.stackexchange.com/a/265649
#   ignoreboth is actually just like doing ignorespace:ignoredups
HISTCONTROL=ignoreboth:erasedups

HISTSIZE=5000        # How many lines of history to store in memory - default 500.
HISTFILESIZE=2000000 # How many lines of history to retain in HISTFILE.

# Append to the history file, don't overwrite it
shopt -s histappend
PROMPT_COMMAND="history -a; history -w; history -c; history -r;"
# history -a = update histfile after every command.
# history -c clears the history buffer of the running session to prevent duplicates.
#   This will reduce the history counter by the amount of $HISTSIZE.
# history -r read the contents of $HISTFILE and insert them in to the current running session history thus appending
#     to the history buffer wiped with history -c.
#   This will raise the history counter by the amount of lines in $HISTFILE
# history -n - reads all lines from $HISTFILE that may have occurred in a different terminal since the last
#     carriage return.
#   Only new lines are read from the history file - faster than using -c and -r combo. (but some people complain it
#   does not work in new terminal sessions. https://askubuntu.com/a/673283).

hist_dir="$HOME/.bash_histories"
mkdir -p "$hist_dir"

export HISTFILE="$hist_dir/.bash_history"

if [[ ! -e "$HISTFILE" ]]; then
  touch "$HISTFILE"
fi

# Make bash history unique

# Courtesy https://unix.stackexchange.com/a/179852
__make_bash_history_unique() {
  local _temp_file="/tmp/tmpfile-bash-history"

  tac "$HISTFILE" | # reverse contents of HISTFILE
    awk '!x[$0]++' >"${_temp_file}" # keep the first occurrence (line) of content and discard subsequent occurrences and write to temp file.

  tac "${_temp_file}" >"$HISTFILE" # reverse contents of temp file and write back to HISTFILE.
  rm "${_temp_file}"
}
alias hu='__make_bash_history_unique'
