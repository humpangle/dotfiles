#!/usr/bin/env bash
# shellcheck disable=2034,2209,2135,2155,2139,2086,1090
# vim:ft=bash

# https://unix.stackexchange.com/a/265649
#   ignoreboth is actually just like doing ignorespace:ignoredups
export HISTCONTROL=ignoreboth:erasedups

export HISTSIZE=5000        # How many lines of history to store in memory - default 500.
export HISTFILESIZE=2000000 # How many lines of history to retain in HISTFILE.

# Append to the history file, don't overwrite it
shopt -s histappend
PROMPT_COMMAND="history -a; history -w; history -c; history -r;"
# history -a = update histfile after every command.
# history -c clears the history buffer of the running session to prevent duplicates.
#   This will reduce the history counter by the amount of $HISTSIZE.
# history -r read the contents of $HISTFILE and insert them in to the current running session history thus appending
#     to the history buffer wiped with history -c.
#   This will raise the history counter by the amount of lines in $HISTFILE
# history -n - reads all lines from $HISTFILE that may have occurred in a different terminal since the last
#     carriage return.
#   Only new lines are read from the history file - faster than using -c and -r combo. (but some people complain it
#   does not work in new terminal sessions. https://askubuntu.com/a/673283).

hist_dir="$HOME/.bash_histories"
mkdir -p "$hist_dir"

export HISTFILE="$hist_dir/.bash_history"

if [[ ! -e "$HISTFILE" ]]; then
  touch "$HISTFILE"
fi

# Make bash history unique
#
# Courtesy https://unix.stackexchange.com/a/179852
_____make_bash_history_unique_help() {
  read -r -d '' var <<'eof' || true
Make bash history file contain unique values. Usage:
  __make_bash_history_unique [OPTIONS]

Options:
  --help/-h
    Print this help text and quit.
  --debug/-d
    Do not delete temporary files used for transformation and echo the files' paths so developer can inspect them for
    debug purpose.

Examples:
  # Get help.
  __make_bash_history_unique --help

  # Preserve temporary files and print debug info
  __make_bash_history_unique --debug
  __make_bash_history_unique -d

  # Make HISTFILE contain unique values.
  __make_bash_history_unique
eof

  echo -e "${var}\n"
}

__make_bash_history_unique() {
  : "___help___ _____make_bash_history_unique_help"

  local _temp_file="/tmp/tmpfile-bash-history-$(date +'%s')"
  local _temp_file_reversed="${_temp_file}-reversed"
  local _temp_file_reversed_unique="${_temp_file_reversed}-unique"
  local _temp_file_unique="${_temp_file}-unique"

  # --------------------------------------------------------------------------
  # PARSE ARGUMENTS
  # --------------------------------------------------------------------------
  local _parsed
  local _debug

  if ! _parsed="$(
    getopt \
      --longoptions=help,debug \
      --options=h,d \
      --name "$0" \
      -- "$@"
  )"; then
    _____make_bash_history_unique_help
    return 129
  fi

  # Provides proper quoting
  eval set -- "$_parsed"

  while true; do
    case "$1" in
    --help | -h)
      _____make_bash_history_unique_help
      return 129
      ;;

    --debug | -d)
      _debug=1
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      Echo "Unknown option ${1}."
      _____make_bash_history_unique_help
      return 129
      ;;
    esac
  done

  echo "$HISTFILE originally contains: $(wc -l "$HISTFILE" | awk '{print $1}') lines."

  # Reverse contents of HISTFILE.
  tac "$HISTFILE" >"$_temp_file_reversed"

  # Keep the first occurrence (line) of content and discard subsequent occurrences to make history unique. The result
  # is that we actually retain the last unique lines in the original HISTFILE (i.e new values are retained).
  awk '!x[$0]++' "$_temp_file_reversed" >"$_temp_file_reversed_unique"

  # Reverse contents of unique history - to get back history lines such that older repeated values are discarded.
  tac "$_temp_file_reversed_unique" >"$_temp_file_unique"

  # Overwrite the HISTFILE with the content of "$_temp_file_unique".
  cat "$_temp_file_unique" >"$HISTFILE"

  # Clear the current history in memory.
  history -c

  # Load only the $HISTSIZE most recent lines into the current session's history.
  history -r "$_temp_file_unique"

  # Write the loaded history to the HISTFILE.
  history -w

  if [[ -n "$_debug" ]]; then
    echo "Reversed:       $_temp_file_reversed"
    echo "Reversed unique $_temp_file_reversed_unique"
    echo "Unique:         $_temp_file_unique"
    echo "HISTFILE:       $HISTFILE"
  else
    rm -rf \
      "$_temp_file_reversed" \
      "$_temp_file_reversed_unique" \
      "$_temp_file_unique"
  fi

  echo "$HISTFILE now contains:        $(wc -l "$HISTFILE" | awk '{print $1}') lines."
}

alias hu='__make_bash_history_unique'
